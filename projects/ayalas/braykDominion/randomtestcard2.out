Running Random Card Test for Council Room
Hand Test 0 failed: before-293 after-296
Deck Test 0 passed: before-277 after-273
Discard Test 0 passed: before-415 after-415
Actions Test 0 passed: before-1 after-1
Buy Test 0 passed: before-1 after-2
Hand Test 1 failed: before-421 after-424
Deck Test 1 passed: before-492 after-488
Discard Test 1 passed: before-149 after-149
Actions Test 1 passed: before-1 after-1
Buy Test 1 passed: before-1 after-2
Hand Test 2 failed: before-263 after-266
Deck Test 2 passed: before-190 after-186
Discard Test 2 passed: before-59 after-59
Actions Test 2 passed: before-1 after-1
Buy Test 2 passed: before-1 after-2
Hand Test 3 failed: before-236 after-239
Deck Test 3 passed: before-426 after-422
Discard Test 3 passed: before-172 after-172
Actions Test 3 passed: before-1 after-1
Buy Test 3 passed: before-1 after-2
Hand Test 4 failed: before-282 after-285
Deck Test 4 passed: before-67 after-63
Discard Test 4 passed: before-429 after-429
Actions Test 4 passed: before-1 after-1
Buy Test 4 passed: before-1 after-2
Hand Test 5 failed: before-135 after-138
Deck Test 5 passed: before-123 after-119
Discard Test 5 passed: before-67 after-67
Actions Test 5 passed: before-1 after-1
Buy Test 5 passed: before-1 after-2
Hand Test 6 failed: before-69 after-72
Deck Test 6 passed: before-22 after-18
Discard Test 6 passed: before-58 after-58
Actions Test 6 passed: before-1 after-1
Buy Test 6 passed: before-2 after-3
Hand Test 7 failed: before-42 after-45
Deck Test 7 passed: before-456 after-452
Discard Test 7 passed: before-11 after-11
Actions Test 7 passed: before-1 after-1
Buy Test 7 passed: before-1 after-2
Hand Test 8 failed: before-284 after-287
Deck Test 8 passed: before-421 after-417
Discard Test 8 passed: before-419 after-419
Actions Test 8 passed: before-1 after-1
Buy Test 8 passed: before-2 after-3
Hand Test 9 failed: before-370 after-373
Deck Test 9 passed: before-324 after-320
Discard Test 9 passed: before-315 after-315
Actions Test 9 passed: before-1 after-1
Buy Test 9 passed: before-3 after-4
Hand Test 10 failed: before-456 after-459
Deck Test 10 passed: before-91 after-87
Discard Test 10 passed: before-480 after-480
Actions Test 10 passed: before-1 after-1
Buy Test 10 passed: before-4 after-5
Hand Test 11 failed: before-281 after-284
Deck Test 11 passed: before-170 after-166
Discard Test 11 passed: before-496 after-496
Actions Test 11 passed: before-1 after-1
Buy Test 11 passed: before-5 after-6
Hand Test 12 failed: before-336 after-339
Deck Test 12 passed: before-84 after-80
Discard Test 12 passed: before-327 after-327
Actions Test 12 passed: before-1 after-1
Buy Test 12 passed: before-6 after-7
Hand Test 13 failed: before-357 after-360
Deck Test 13 passed: before-229 after-225
Discard Test 13 passed: before-313 after-313
Actions Test 13 passed: before-1 after-1
Buy Test 13 passed: before-7 after-8
Hand Test 14 failed: before-314 after-317
Deck Test 14 passed: before-82 after-78
Discard Test 14 passed: before-45 after-45
Actions Test 14 passed: before-1 after-1
Buy Test 14 passed: before-8 after-9
Hand Test 15 failed: before-250 after-253
Deck Test 15 passed: before-364 after-360
Discard Test 15 passed: before-43 after-43
Actions Test 15 passed: before-1 after-1
Buy Test 15 passed: before-1 after-2
Hand Test 16 failed: before-288 after-291
Deck Test 16 passed: before-276 after-272
Discard Test 16 passed: before-178 after-178
Actions Test 16 passed: before-1 after-1
Buy Test 16 passed: before-1 after-2
Hand Test 17 failed: before-399 after-402
Deck Test 17 passed: before-151 after-147
Discard Test 17 passed: before-254 after-254
Actions Test 17 passed: before-1 after-1
Buy Test 17 passed: before-2 after-3
Hand Test 18 failed: before-239 after-242
Deck Test 18 passed: before-176 after-172
Discard Test 18 passed: before-368 after-368
Actions Test 18 passed: before-1 after-1
Buy Test 18 passed: before-3 after-4
Hand Test 19 failed: before-39 after-42
Deck Test 19 passed: before-86 after-82
Discard Test 19 passed: before-94 after-94
Actions Test 19 passed: before-1 after-1
Buy Test 19 passed: before-4 after-5
Hand Test 20 failed: before-467 after-470
Deck Test 20 passed: before-434 after-430
Discard Test 20 passed: before-378 after-378
Actions Test 20 passed: before-1 after-1
Buy Test 20 passed: before-1 after-2
Hand Test 21 failed: before-492 after-495
Deck Test 21 passed: before-402 after-398
Discard Test 21 passed: before-317 after-317
Actions Test 21 passed: before-1 after-1
Buy Test 21 passed: before-2 after-3
Hand Test 22 failed: before-286 after-289
Deck Test 22 passed: before-301 after-297
Discard Test 22 passed: before-280 after-280
Actions Test 22 passed: before-1 after-1
Buy Test 22 passed: before-3 after-4
Hand Test 23 failed: before-119 after-122
Deck Test 23 passed: before-189 after-185
Discard Test 23 passed: before-444 after-444
Actions Test 23 passed: before-1 after-1
Buy Test 23 passed: before-4 after-5
Hand Test 24 failed: before-97 after-100
Deck Test 24 passed: before-31 after-27
Discard Test 24 passed: before-117 after-117
Actions Test 24 passed: before-1 after-1
Buy Test 24 passed: before-5 after-6
Hand Test 25 failed: before-427 after-430
Deck Test 25 passed: before-175 after-171
Discard Test 25 passed: before-209 after-209
Actions Test 25 passed: before-1 after-1
Buy Test 25 passed: before-1 after-2
Hand Test 26 failed: before-86 after-89
Deck Test 26 passed: before-497 after-493
Discard Test 26 passed: before-353 after-353
Actions Test 26 passed: before-1 after-1
Buy Test 26 passed: before-1 after-2
Hand Test 27 failed: before-124 after-127
Deck Test 27 passed: before-183 after-179
Discard Test 27 passed: before-219 after-219
Actions Test 27 passed: before-1 after-1
Buy Test 27 passed: before-2 after-3
Hand Test 28 failed: before-3 after-6
Deck Test 28 passed: before-232 after-228
Discard Test 28 passed: before-329 after-329
Actions Test 28 passed: before-1 after-1
Buy Test 28 passed: before-3 after-4
Hand Test 29 failed: before-215 after-218
Deck Test 29 passed: before-368 after-364
Discard Test 29 passed: before-208 after-208
Actions Test 29 passed: before-1 after-1
Buy Test 29 passed: before-1 after-2
Hand Test 30 failed: before-118 after-121
Deck Test 30 passed: before-296 after-292
Discard Test 30 passed: before-223 after-223
Actions Test 30 passed: before-1 after-1
Buy Test 30 passed: before-2 after-3
Hand Test 31 failed: before-55 after-58
Deck Test 31 passed: before-451 after-447
Discard Test 31 passed: before-421 after-421
Actions Test 31 passed: before-1 after-1
Buy Test 31 passed: before-3 after-4
Hand Test 32 failed: before-341 after-344
Deck Test 32 passed: before-264 after-260
Discard Test 32 passed: before-228 after-228
Actions Test 32 passed: before-1 after-1
Buy Test 32 passed: before-1 after-2
Hand Test 33 failed: before-264 after-267
Deck Test 33 Test 0 failed: before-30 after--1561749112

Discard Test 33 failed: before-34 after-0
Actions Test 33 passed: before-1 after-1
Buy Test 33 passed: before-1 after-2
Hand Test 34 failed: before-243 after-246
Deck Test 34 passed: before-487 after-483
Discard Test 34 passed: before-356 after-356
Actions Test 34 passed: before-1 after-1
Buy Test 34 passed: before-2 after-3
Hand Test 35 failed: before-436 after-439
Deck Test 35 passed: before-365 after-361
Discard Test 35 passed: before-359 after-359
Actions Test 35 passed: before-1 after-1
Buy Test 35 passed: before-1 after-2
Hand Test 36 failed: before-275 after-278
Deck Test 36 passed: before-437 after-433
Discard Test 36 passed: before-228 after-228
Actions Test 36 passed: before-1 after-1
Buy Test 36 passed: before-2 after-3
Hand Test 37 failed: before-395 after-398
Deck Test 37 passed: before-121 after-117
Discard Test 37 passed: before-358 after-358
Actions Test 37 passed: before-1 after-1
Buy Test 37 passed: before-1 after-2
Hand Test 38 failed: before-318 after-321
Deck Test 38 passed: before-235 after-231
Discard Test 38 passed: before-293 after-293
Actions Test 38 passed: before-1 after-1
Buy Test 38 passed: before-2 after-3
Hand Test 39 failed: before-29 after-32
Deck Test 39 passed: before-11 after-7
Discard Test 39 passed: before-428 after-428
Actions Test 39 passed: before-1 after-1
Buy Test 39 passed: before-3 after-4
Hand Test 40 failed: before-113 after-116
Deck Test 40 passed: before-443 after-439
Discard Test 40 passed: before-263 after-263
Actions Test 40 passed: before-1 after-1
Buy Test 40 passed: before-4 after-5
Hand Test 41 failed: before-318 after-321
Deck Test 41 passed: before-340 after-336
Discard Test 41 passed: before-404 after-404
Actions Test 41 passed: before-1 after-1
Buy Test 41 passed: before-1 after-2
Hand Test 42 failed: before-417 after-420
Deck Test 42 passed: before-369 after-365
Discard Test 42 passed: before-417 after-417
Actions Test 42 passed: before-1 after-1
Buy Test 42 passed: before-2 after-3
Hand Test 43 failed: before-183 after-186
Deck Test 43 passed: before-243 after-239
Discard Test 43 passed: before-470 after-470
Actions Test 43 passed: before-1 after-1
Buy Test 43 passed: before-3 after-4
Hand Test 44 failed: before-144 after-147
Deck Test 44 passed: before-272 after-268
Discard Test 44 passed: before-225 after-225
Actions Test 44 passed: before-1 after-1
Buy Test 44 passed: before-1 after-2
Hand Test 45 failed: before-286 after-289
Deck Test 45 passed: before-139 after-135
Discard Test 45 passed: before-454 after-454
Actions Test 45 passed: before-1 after-1
Buy Test 45 passed: before-1 after-2
Hand Test 46 failed: before-197 after-200
Deck Test 46 passed: before-42 after-38
Discard Test 46 passed: before-464 after-464
Actions Test 46 passed: before-1 after-1
Buy Test 46 passed: before-2 after-3
Hand Test 47 failed: before-111 after-114
Deck Test 47 passed: before-304 after-300
Discard Test 47 passed: before-348 after-348
Actions Test 47 passed: before-1 after-1
Buy Test 47 passed: before-1 after-2
Hand Test 48 failed: before-246 after-249
Deck Test 48 passed: before-299 after-295
Discard Test 48 passed: before-343 after-343
Actions Test 48 passed: before-1 after-1
Buy Test 48 passed: before-1 after-2
Hand Test 49 failed: before-310 after-313
Deck Test 49 passed: before-422 after-418
Discard Test 49 passed: before-311 after-311
Actions Test 49 passed: before-1 after-1
Buy Test 49 passed: before-2 after-3
Hand Test 50 failed: before-378 after-381
Deck Test 50 passed: before-161 after-157
Discard Test 50 passed: before-230 after-230
Actions Test 50 passed: before-1 after-1
Buy Test 50 passed: before-3 after-4
Hand Test 51 failed: before-126 after-129
Deck Test 51 passed: before-236 after-232
Discard Test 51 passed: before-444 after-444
Actions Test 51 passed: before-1 after-1
Buy Test 51 passed: before-4 after-5
Hand Test 52 failed: before-282 after-285
Deck Test 52 passed: before-208 after-204
Discard Test 52 passed: before-416 after-416
Actions Test 52 passed: before-1 after-1
Buy Test 52 passed: before-1 after-2
Hand Test 53 failed: before-124 after-127
Deck Test 53 passed: before-137 after-133
Discard Test 53 passed: before-62 after-62
Actions Test 53 passed: before-1 after-1
Buy Test 53 passed: before-1 after-2
Hand Test 54 failed: before-379 after-382
Deck Test 54 passed: before-452 after-448
Discard Test 54 passed: before-399 after-399
Actions Test 54 passed: before-1 after-1
Buy Test 54 passed: before-2 after-3
Hand Test 55 failed: before-131 after-134
Deck Test 55 passed: before-71 after-67
Discard Test 55 passed: before-473 after-473
Actions Test 55 passed: before-1 after-1
Buy Test 55 passed: before-1 after-2
Hand Test 56 failed: before-160 after-163
Deck Test 56 passed: before-433 after-429
Discard Test 56 passed: before-394 after-394
Actions Test 56 passed: before-1 after-1
Buy Test 56 passed: before-2 after-3
Hand Test 57 failed: before-496 after-499
Deck Test 57 passed: before-481 after-477
Discard Test 57 passed: before-399 after-399
Actions Test 57 passed: before-1 after-1
Buy Test 57 passed: before-1 after-2
Hand Test 58 failed: before-190 after-193
Deck Test 58 passed: before-313 after-309
Discard Test 58 passed: before-168 after-168
Actions Test 58 passed: before-1 after-1
Buy Test 58 passed: before-1 after-2
Hand Test 59 failed: before-340 after-343
Deck Test 59 passed: before-466 after-462
Discard Test 59 passed: before-84 after-84
Actions Test 59 passed: before-1 after-1
Buy Test 59 passed: before-1 after-2
Hand Test 60 failed: before-436 after-439
Deck Test 60 passed: before-376 after-372
Discard Test 60 passed: before-42 after-42
Actions Test 60 passed: before-1 after-1
Buy Test 60 passed: before-1 after-2
Hand Test 61 failed: before-418 after-421
Deck Test 61 passed: before-256 after-252
Discard Test 61 passed: before-179 after-179
Actions Test 61 passed: before-1 after-1
Buy Test 61 passed: before-1 after-2
Hand Test 62 failed: before-159 after-162
Deck Test 62 passed: before-348 after-344
Discard Test 62 passed: before-172 after-172
Actions Test 62 passed: before-1 after-1
Buy Test 62 passed: before-1 after-2
Hand Test 63 failed: before-87 after-90
Deck Test 63 passed: before-210 after-206
Discard Test 63 passed: before-342 after-342
Actions Test 63 passed: before-1 after-1
Buy Test 63 passed: before-2 after-3
Hand Test 64 failed: before-321 after-324
Deck Test 64 passed: before-213 after-209
Discard Test 64 passed: before-372 after-372
Actions Test 64 passed: before-1 after-1
Buy Test 64 passed: before-1 after-2
Hand Test 65 failed: before-404 after-407
Deck Test 65 passed: before-99 after-95
Discard Test 65 passed: before-221 after-221
Actions Test 65 passed: before-1 after-1
Buy Test 65 passed: before-1 after-2
Hand Test 66 failed: before-205 after-208
Deck Test 66 passed: before-440 after-436
Discard Test 66 passed: before-167 after-167
Actions Test 66 passed: before-1 after-1
Buy Test 66 passed: before-1 after-2
Hand Test 67 failed: before-158 after-161
Deck Test 67 passed: before-150 after-146
Discard Test 67 passed: before-484 after-484
Actions Test 67 passed: before-1 after-1
Buy Test 67 passed: before-2 after-3
Hand Test 68 failed: before-396 after-399
Deck Test 68 passed: before-422 after-418
Discard Test 68 passed: before-269 after-269
Actions Test 68 passed: before-1 after-1
Buy Test 68 passed: before-3 after-4
Hand Test 69 failed: before-472 after-475
Deck Test 69 passed: before-84 after-80
Discard Test 69 passed: before-292 after-292
Actions Test 69 passed: before-1 after-1
Buy Test 69 passed: before-4 after-5
Hand Test 70 failed: before-222 after-225
Deck Test 70 passed: before-125 after-121
Discard Test 70 passed: before-385 after-385
Actions Test 70 passed: before-1 after-1
Buy Test 70 passed: before-5 after-6
Hand Test 71 failed: before-213 after-216
Deck Test 71 passed: before-42 after-38
Discard Test 71 passed: before-398 after-398
Actions Test 71 passed: before-1 after-1
Buy Test 71 passed: before-1 after-2
Hand Test 72 failed: before-209 after-212
Deck Test 72 passed: before-24 after-20
Discard Test 72 passed: before-90 after-90
Actions Test 72 passed: before-1 after-1
Buy Test 72 passed: before-1 after-2
Hand Test 73 failed: before-155 after-158
Deck Test 73 passed: before-336 after-332
Discard Test 73 passed: before-232 after-232
Actions Test 73 passed: before-1 after-1
Buy Test 73 passed: before-2 after-3
Hand Test 74 failed: before-273 after-276
Deck Test 74 passed: before-379 after-375
Discard Test 74 passed: before-269 after-269
Actions Test 74 passed: before-1 after-1
Buy Test 74 passed: before-1 after-2
Hand Test 75 failed: before-142 after-145
Deck Test 75 passed: before-255 after-251
Discard Test 75 passed: before-360 after-360
Actions Test 75 passed: before-1 after-1
Buy Test 75 passed: before-2 after-3
Hand Test 76 failed: before-121 after-124
Deck Test 76 passed: before-493 after-489
Discard Test 76 passed: before-205 after-205
Actions Test 76 passed: before-1 after-1
Buy Test 76 passed: before-1 after-2
Hand Test 77 failed: before-254 after-257
Deck Test 77 passed: before-113 after-109
Discard Test 77 passed: before-461 after-461
Actions Test 77 passed: before-1 after-1
Buy Test 77 passed: before-1 after-2
Hand Test 78 failed: before-202 after-205
Deck Test 78 passed: before-444 after-440
Discard Test 78 passed: before-202 after-202
Actions Test 78 passed: before-1 after-1
Buy Test 78 passed: before-1 after-2
Hand Test 79 failed: before-368 after-371
Deck Test 79 passed: before-21 after-17
Discard Test 79 passed: before-342 after-342
Actions Test 79 passed: before-1 after-1
Buy Test 79 passed: before-1 after-2
Hand Test 80 failed: before-458 after-461
Deck Test 80 passed: before-372 after-368
Discard Test 80 passed: before-408 after-408
Actions Test 80 passed: before-1 after-1
Buy Test 80 passed: before-2 after-3
Hand Test 81 failed: before-248 after-251
Deck Test 81 passed: before-308 after-304
Discard Test 81 passed: before-253 after-253
Actions Test 81 passed: before-1 after-1
Buy Test 81 passed: before-1 after-2
Hand Test 82 failed: before-390 after-393
Deck Test 82 passed: before-133 after-129
Discard Test 82 passed: before-148 after-148
Actions Test 82 passed: before-1 after-1
Buy Test 82 passed: before-1 after-2
Hand Test 83 failed: before-29 after-32
Deck Test 83 passed: before-246 after-242
Discard Test 83 passed: before-368 after-368
Actions Test 83 passed: before-1 after-1
Buy Test 83 passed: before-1 after-2
Hand Test 84 failed: before-249 after-252
Deck Test 84 passed: before-288 after-284
Discard Test 84 passed: before-297 after-297
Actions Test 84 passed: before-1 after-1
Buy Test 84 passed: before-2 after-3
Hand Test 85 failed: before-497 after-500
Deck Test 85 passed: before-33 after-29
Discard Test 85 passed: before-363 after-363
Actions Test 85 passed: before-1 after-1
Buy Test 85 passed: before-1 after-2
Hand Test 86 failed: before-152 after-155
Deck Test 86 passed: before-186 after-182
Discard Test 86 passed: before-125 after-125
Actions Test 86 passed: before-1 after-1
Buy Test 86 passed: before-2 after-3
Hand Test 87 failed: before-229 after-232
Deck Test 87 passed: before-188 after-184
Discard Test 87 passed: before-157 after-157
Actions Test 87 passed: before-1 after-1
Buy Test 87 passed: before-3 after-4
Hand Test 88 failed: before-460 after-463
Deck Test 88 passed: before-414 after-410
Discard Test 88 passed: before-421 after-421
Actions Test 88 passed: before-1 after-1
Buy Test 88 passed: before-4 after-5
Hand Test 89 failed: before-248 after-251
Deck Test 89 passed: before-27 after-23
Discard Test 89 passed: before-50 after-50
Actions Test 89 passed: before-1 after-1
Buy Test 89 passed: before-5 after-6
Hand Test 90 failed: before-199 after-202
Deck Test 90 passed: before-294 after-290
Discard Test 90 passed: before-197 after-197
Actions Test 90 passed: before-1 after-1
Buy Test 90 passed: before-6 after-7
Hand Test 91 failed: before-403 after-406
Deck Test 91 Test 2 failed: before-426 after--1561749112

Discard Test 91 failed: before-428 after-0
Actions Test 91 passed: before-1 after-1
Buy Test 91 passed: before-1 after-2
Hand Test 92 failed: before-159 after-162
Deck Test 92 passed: before-147 after-143
Discard Test 92 passed: before-38 after-38
Actions Test 92 passed: before-1 after-1
Buy Test 92 passed: before-2 after-3
Hand Test 93 failed: before-192 after-195
Deck Test 93 passed: before-134 after-130
Discard Test 93 passed: before-339 after-339
Actions Test 93 passed: before-1 after-1
Buy Test 93 passed: before-1 after-2
Hand Test 94 failed: before-49 after-52
Deck Test 94 passed: before-4 after-0
Discard Test 94 passed: before-129 after-129
Actions Test 94 passed: before-1 after-1
Buy Test 94 passed: before-1 after-2
Hand Test 95 failed: before-335 after-338
Deck Test 95 passed: before-429 after-425
Discard Test 95 passed: before-343 after-343
Actions Test 95 passed: before-1 after-1
Buy Test 95 passed: before-2 after-3
Hand Test 96 failed: before-449 after-452
Deck Test 96 passed: before-238 after-234
Discard Test 96 passed: before-471 after-471
Actions Test 96 passed: before-1 after-1
Buy Test 96 passed: before-3 after-4
Hand Test 97 failed: before-295 after-298
Deck Test 97 passed: before-488 after-484
Discard Test 97 passed: before-292 after-292
Actions Test 97 passed: before-1 after-1
Buy Test 97 passed: before-4 after-5
Hand Test 98 failed: before-182 after-185
Deck Test 98 passed: before-329 after-325
Discard Test 98 passed: before-390 after-390
Actions Test 98 passed: before-1 after-1
Buy Test 98 passed: before-1 after-2
Hand Test 99 failed: before-232 after-235
Deck Test 99 passed: before-69 after-65
Discard Test 99 passed: before-326 after-326
Actions Test 99 passed: before-1 after-1
Buy Test 99 passed: before-2 after-3


Status: 104 failured and 396 passed tests
100 games run
File 'dominion.c'
Lines executed:25.18% of 548
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
     3788:    8:int compare(const void* a, const void* b) {
     3788:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
     3788:   11:  if (*(int*)a < *(int*)b)
      621:   12:    return -1;
     3167:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
      100:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      100:   44:  SelectStream(1);
      100:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
      100:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
       51:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       49:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      539:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     5390:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     4900:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       49:   73:  if (numPlayers == 2)
        -:   74:    {
       20:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
       29:   77:  else if (numPlayers == 3)
        -:   78:    {
       29:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       49:   87:  if (numPlayers == 2)
        -:   88:    {
       20:   89:      state->supplyCount[estate] = 8;
       20:   90:      state->supplyCount[duchy] = 8;
       20:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
       29:   95:      state->supplyCount[estate] = 12;
       29:   96:      state->supplyCount[duchy] = 12;
       29:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       49:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       49:  102:  state->supplyCount[silver] = 40;
       49:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     1029:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     8085:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     7595:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      490:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       98:  115:		  if (numPlayers == 2){ 
       20:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
       29:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      441:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      490:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     7105:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      176:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
      127:  140:      state->deckCount[i] = 0;
      508:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
      381:  143:	  state->deck[i][j] = estate;
      381:  144:	  state->deckCount[i]++;
        -:  145:	}
     1016:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      889:  148:	  state->deck[i][j] = copper;
      889:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      176:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
      127:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      176:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      127:  166:      state->handCount[i] = 0;
      127:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     1372:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
     1323:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       49:  182:  state->outpostPlayed = 0;
       49:  183:  state->phase = 0;
       49:  184:  state->numActions = 1;
       49:  185:  state->numBuys = 1;
       49:  186:  state->playedCardCount = 0;
       49:  187:  state->whoseTurn = 0;
       49:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      294:  192:  for (it = 0; it < 5; it++){
      245:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       49:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       49:  198:  return 0;
        -:  199:}
        -:  200:
      129:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      129:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      129:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
      129:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     1990:  214:  while (state->deckCount[player] > 0) {
     1732:  215:    card = floor(Random() * state->deckCount[player]);
     1732:  216:    newDeck[newDeckPos] = state->deck[player][card];
     1732:  217:    newDeckPos++;
    50498:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    48766:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     1732:  221:    state->deckCount[player]--;
        -:  222:  }
     1861:  223:  for (i = 0; i < newDeckPos; i++) {
     1732:  224:    state->deck[player][i] = newDeck[i];
     1732:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      129:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
      100:  346:int whoseTurn(struct gameState *state) {
      100:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
      806:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      806:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      464:  533:    for (i = 0; i < state->discardCount[player];i++){
      462:  534:      state->deck[player][i] = state->discard[player][i];
      462:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        2:  538:    state->deckCount[player] = state->discardCount[player];
        2:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        2:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        2:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        2:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        2:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        2:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
        2:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        2:  563:    state->deckCount[player]--;
        2:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      804:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      804:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      804:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      804:  576:    state->deckCount[player]--;
      804:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      806:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
      100:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
      100:  653:  int currentPlayer = whoseTurn(state);
      100:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
      100:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
      100:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
      100:  660:  int z = 0;// this is the counter for the temp hand
      100:  661:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
      100:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:      while(drawntreasure<2){
    #####:  671:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  672:	  shuffle(currentPlayer, state);
        -:  673:	}
    #####:  674:	drawCard(currentPlayer, state);
    #####:  675:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  676:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  677:	  drawntreasure++;
        -:  678:	else{
    #####:  679:	  temphand[z]=cardDrawn;
    #####:  680:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  681:	  z++;
        -:  682:	}
        -:  683:      }
    #####:  684:      while(z-1>=0){
    #####:  685:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  686:	z=z-1;
        -:  687:      }
    #####:  688:      return 0;
        -:  689:			
        -:  690:    case council_room:
        -:  691:      //+4 Cards
      500:  692:      for (i = 0; i < 4; i++)
        -:  693:	{
      400:  694:	  drawCard(currentPlayer, state);
        -:  695:	}
        -:  696:			
        -:  697:      //+1 Buy
      100:  698:      state->numBuys++;
        -:  699:			
        -:  700:      //Each other player draws a card
      361:  701:      for (i = 0; i < state->numPlayers; i++)
        -:  702:	{
      261:  703:	  if ( i != currentPlayer )
        -:  704:	    {
      161:  705:	      drawCard(i, state);
        -:  706:	    }
        -:  707:	}
        -:  708:			
        -:  709:      //put played card in played card pile
      100:  710:      discardCard(handPos, currentPlayer, state, 0);
        -:  711:			
      100:  712:      return 0;
        -:  713:			
        -:  714:    case feast:
        -:  715:      //gain card with cost up to 5
        -:  716:      //Backup hand
    #####:  717:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  718:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  719:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  720:      }
        -:  721:      //Backup hand
        -:  722:
        -:  723:      //Update Coins for Buy
    #####:  724:      updateCoins(currentPlayer, state, 5);
    #####:  725:      x = 1;//Condition to loop on
    #####:  726:      while( x == 1) {//Buy one card
    #####:  727:	if (supplyCount(choice1, state) <= 0){
        -:  728:	  if (DEBUG)
        -:  729:	    printf("None of that card left, sorry!\n");
        -:  730:
        -:  731:	  if (DEBUG){
        -:  732:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  733:	  }
        -:  734:	}
    #####:  735:	else if (state->coins < getCost(choice1)){
    #####:  736:	  printf("That card is too expensive!\n");
        -:  737:
        -:  738:	  if (DEBUG){
        -:  739:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  740:	  }
        -:  741:	}
        -:  742:	else{
        -:  743:
        -:  744:	  if (DEBUG){
        -:  745:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  746:	  }
        -:  747:
    #####:  748:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  749:	  x = 0;//No more buying cards
        -:  750:
        -:  751:	  if (DEBUG){
        -:  752:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  753:	  }
        -:  754:
        -:  755:	}
        -:  756:      }     
        -:  757:
        -:  758:      //Reset Hand
    #####:  759:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  760:	state->hand[currentPlayer][i] = temphand[i];
    #####:  761:	temphand[i] = -1;
        -:  762:      }
        -:  763:      //Reset Hand
        -:  764:      			
    #####:  765:      return 0;
        -:  766:			
        -:  767:    case gardens:
    #####:  768:      return -1;
        -:  769:			
        -:  770:    case mine:
    #####:  771:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  772:
    #####:  773:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  774:	{
    #####:  775:	  return -1;
        -:  776:	}
        -:  777:		
    #####:  778:      if (choice2 > treasure_map || choice2 < curse)
        -:  779:	{
    #####:  780:	  return -1;
        -:  781:	}
        -:  782:
    #####:  783:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  784:	{
    #####:  785:	  return -1;
        -:  786:	}
        -:  787:
    #####:  788:      gainCard(choice2, state, 2, currentPlayer);
        -:  789:
        -:  790:      //discard card from hand
    #####:  791:      discardCard(handPos, currentPlayer, state, 0);
        -:  792:
        -:  793:      //discard trashed card
    #####:  794:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  795:	{
    #####:  796:	  if (state->hand[currentPlayer][i] == j)
        -:  797:	    {
    #####:  798:	      discardCard(i, currentPlayer, state, 0);			
    #####:  799:	      break;
        -:  800:	    }
        -:  801:	}
        -:  802:			
    #####:  803:      return 0;
        -:  804:			
        -:  805:    case remodel:
    #####:  806:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  807:
    #####:  808:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  809:	{
    #####:  810:	  return -1;
        -:  811:	}
        -:  812:
    #####:  813:      gainCard(choice2, state, 0, currentPlayer);
        -:  814:
        -:  815:      //discard card from hand
    #####:  816:      discardCard(handPos, currentPlayer, state, 0);
        -:  817:
        -:  818:      //discard trashed card
    #####:  819:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  820:	{
    #####:  821:	  if (state->hand[currentPlayer][i] == j)
        -:  822:	    {
    #####:  823:	      discardCard(i, currentPlayer, state, 0);			
    #####:  824:	      break;
        -:  825:	    }
        -:  826:	}
        -:  827:
        -:  828:
    #####:  829:      return 0;
        -:  830:		
        -:  831:    case smithy:
        -:  832:      //+3 Cards
    #####:  833:      for (i = 0; i < 3; i++)
        -:  834:	{
    #####:  835:	  drawCard(currentPlayer, state);
        -:  836:	}
        -:  837:			
        -:  838:      //discard card from hand
    #####:  839:      discardCard(handPos, currentPlayer, state, 0);
    #####:  840:      return 0;
        -:  841:		
        -:  842:    case village:
        -:  843:      //+1 Card
    #####:  844:      drawCard(currentPlayer, state);
        -:  845:			
        -:  846:      //+2 Actions
    #####:  847:      state->numActions = state->numActions + 2;
        -:  848:			
        -:  849:      //discard played card from hand
    #####:  850:      discardCard(handPos, currentPlayer, state, 0);
    #####:  851:      return 0;
        -:  852:		
        -:  853:    case baron:
    #####:  854:      state->numBuys++;//Increase buys by 1!
    #####:  855:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  856:	int p = 0;//Iterator for hand!
    #####:  857:	int card_not_discarded = 1;//Flag for discard set!
    #####:  858:	while(card_not_discarded){
    #####:  859:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  860:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  861:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  862:	    state->discardCount[currentPlayer]++;
    #####:  863:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  864:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  865:	    }
    #####:  866:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  867:	    state->handCount[currentPlayer]--;
    #####:  868:	    card_not_discarded = 0;//Exit the loop
        -:  869:	  }
    #####:  870:	  else if (p > state->handCount[currentPlayer]){
        -:  871:	    if(DEBUG) {
        -:  872:	      printf("No estate cards in your hand, invalid choice\n");
        -:  873:	      printf("Must gain an estate if there are any\n");
        -:  874:	    }
    #####:  875:	    if (supplyCount(estate, state) > 0){
    #####:  876:	      gainCard(estate, state, 0, currentPlayer);
    #####:  877:	      state->supplyCount[estate]--;//Decrement estates
    #####:  878:	      if (supplyCount(estate, state) == 0){
    #####:  879:		isGameOver(state);
        -:  880:	      }
        -:  881:	    }
    #####:  882:	    card_not_discarded = 0;//Exit the loop
        -:  883:	  }
        -:  884:			    
        -:  885:	  else{
    #####:  886:	    p++;//Next card
        -:  887:	  }
        -:  888:	}
        -:  889:      }
        -:  890:			    
        -:  891:      else{
    #####:  892:	if (supplyCount(estate, state) > 0){
    #####:  893:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  894:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  895:	  if (supplyCount(estate, state) == 0){
    #####:  896:	    isGameOver(state);
        -:  897:	  }
        -:  898:	}
        -:  899:      }
        -:  900:	    
        -:  901:      
    #####:  902:      return 0;
        -:  903:		
        -:  904:    case great_hall:
        -:  905:      //+1 Card
    #####:  906:      drawCard(currentPlayer, state);
        -:  907:			
        -:  908:      //+1 Actions
    #####:  909:      state->numActions++;
        -:  910:			
        -:  911:      //discard card from hand
    #####:  912:      discardCard(handPos, currentPlayer, state, 0);
    #####:  913:      return 0;
        -:  914:		
        -:  915:    case minion:
        -:  916:      //+1 action
    #####:  917:      state->numActions++;
        -:  918:			
        -:  919:      //discard card from hand
    #####:  920:      discardCard(handPos, currentPlayer, state, 0);
        -:  921:			
    #####:  922:      if (choice1)		//+2 coins
        -:  923:	{
    #####:  924:	  state->coins = state->coins + 2;
        -:  925:	}
        -:  926:			
    #####:  927:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  928:	{
        -:  929:	  //discard hand
    #####:  930:	  while(numHandCards(state) > 0)
        -:  931:	    {
    #####:  932:	      discardCard(handPos, currentPlayer, state, 0);
        -:  933:	    }
        -:  934:				
        -:  935:	  //draw 4
    #####:  936:	  for (i = 0; i < 4; i++)
        -:  937:	    {
    #####:  938:	      drawCard(currentPlayer, state);
        -:  939:	    }
        -:  940:				
        -:  941:	  //other players discard hand and redraw if hand size > 4
    #####:  942:	  for (i = 0; i < state->numPlayers; i++)
        -:  943:	    {
    #####:  944:	      if (i != currentPlayer)
        -:  945:		{
    #####:  946:		  if ( state->handCount[i] > 4 )
        -:  947:		    {
        -:  948:		      //discard hand
    #####:  949:		      while( state->handCount[i] > 0 )
        -:  950:			{
    #####:  951:			  discardCard(handPos, i, state, 0);
        -:  952:			}
        -:  953:							
        -:  954:		      //draw 4
    #####:  955:		      for (j = 0; j < 4; j++)
        -:  956:			{
    #####:  957:			  drawCard(i, state);
        -:  958:			}
        -:  959:		    }
        -:  960:		}
        -:  961:	    }
        -:  962:				
        -:  963:	}
    #####:  964:      return 0;
        -:  965:		
        -:  966:    case steward:
    #####:  967:      if (choice1 == 1)
        -:  968:	{
        -:  969:	  //+2 cards
    #####:  970:	  drawCard(currentPlayer, state);
    #####:  971:	  drawCard(currentPlayer, state);
        -:  972:	}
    #####:  973:      else if (choice1 == 2)
        -:  974:	{
        -:  975:	  //+2 coins
    #####:  976:	  state->coins = state->coins + 2;
        -:  977:	}
        -:  978:      else
        -:  979:	{
        -:  980:	  //trash 2 cards in hand
    #####:  981:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  982:	  discardCard(choice3, currentPlayer, state, 1);
        -:  983:	}
        -:  984:			
        -:  985:      //discard card from hand
    #####:  986:      discardCard(handPos, currentPlayer, state, 0);
    #####:  987:      return 0;
        -:  988:		
        -:  989:    case tribute:
    #####:  990:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  991:	if (state->deckCount[nextPlayer] > 0){
    #####:  992:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  993:	  state->deckCount[nextPlayer]--;
        -:  994:	}
    #####:  995:	else if (state->discardCount[nextPlayer] > 0){
    #####:  996:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  997:	  state->discardCount[nextPlayer]--;
        -:  998:	}
        -:  999:	else{
        -: 1000:	  //No Card to Reveal
        -: 1001:	  if (DEBUG){
        -: 1002:	    printf("No cards to reveal\n");
        -: 1003:	  }
        -: 1004:	}
        -: 1005:      }
        -: 1006:	    
        -: 1007:      else{
    #####: 1008:	if (state->deckCount[nextPlayer] == 0){
    #####: 1009:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1010:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1011:	    state->deckCount[nextPlayer]++;
    #####: 1012:	    state->discard[nextPlayer][i] = -1;
    #####: 1013:	    state->discardCount[nextPlayer]--;
        -: 1014:	  }
        -: 1015:			    
    #####: 1016:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1017:	} 
    #####: 1018:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1019:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1020:	state->deckCount[nextPlayer]--;
    #####: 1021:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1022:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1023:	state->deckCount[nextPlayer]--;
        -: 1024:      }    
        -: 1025:		       
    #####: 1026:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1027:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1028:	state->playedCardCount++;
    #####: 1029:	tributeRevealedCards[1] = -1;
        -: 1030:      }
        -: 1031:
    #####: 1032:      for (i = 0; i <= 2; i ++){
    #####: 1033:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1034:	  state->coins += 2;
        -: 1035:	}
        -: 1036:		    
    #####: 1037:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1038:	  drawCard(currentPlayer, state);
    #####: 1039:	  drawCard(currentPlayer, state);
        -: 1040:	}
        -: 1041:	else{//Action Card
    #####: 1042:	  state->numActions = state->numActions + 2;
        -: 1043:	}
        -: 1044:      }
        -: 1045:	    
    #####: 1046:      return 0;
        -: 1047:		
        -: 1048:    case ambassador:
    #####: 1049:      j = 0;		//used to check if player has enough cards to discard
        -: 1050:
    #####: 1051:      if (choice2 > 2 || choice2 < 0)
        -: 1052:	{
    #####: 1053:	  return -1;				
        -: 1054:	}
        -: 1055:
    #####: 1056:      if (choice1 == handPos)
        -: 1057:	{
    #####: 1058:	  return -1;
        -: 1059:	}
        -: 1060:
    #####: 1061:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1062:	{
    #####: 1063:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1064:	    {
    #####: 1065:	      j++;
        -: 1066:	    }
        -: 1067:	}
    #####: 1068:      if (j < choice2)
        -: 1069:	{
    #####: 1070:	  return -1;				
        -: 1071:	}
        -: 1072:
        -: 1073:      if (DEBUG) 
        -: 1074:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1075:
        -: 1076:      //increase supply count for choosen card by amount being discarded
    #####: 1077:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1078:			
        -: 1079:      //each other player gains a copy of revealed card
    #####: 1080:      for (i = 0; i < state->numPlayers; i++)
        -: 1081:	{
    #####: 1082:	  if (i != currentPlayer)
        -: 1083:	    {
    #####: 1084:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1085:	    }
        -: 1086:	}
        -: 1087:
        -: 1088:      //discard played card from hand
    #####: 1089:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1090:
        -: 1091:      //trash copies of cards returned to supply
    #####: 1092:      for (j = 0; j < choice2; j++)
        -: 1093:	{
    #####: 1094:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1095:	    {
    #####: 1096:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1097:		{
    #####: 1098:		  discardCard(i, currentPlayer, state, 1);
    #####: 1099:		  break;
        -: 1100:		}
        -: 1101:	    }
        -: 1102:	}			
        -: 1103:
    #####: 1104:      return 0;
        -: 1105:		
        -: 1106:    case cutpurse:
        -: 1107:
    #####: 1108:      updateCoins(currentPlayer, state, 2);
    #####: 1109:      for (i = 0; i < state->numPlayers; i++)
        -: 1110:	{
    #####: 1111:	  if (i != currentPlayer)
        -: 1112:	    {
    #####: 1113:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1114:		{
    #####: 1115:		  if (state->hand[i][j] == copper)
        -: 1116:		    {
    #####: 1117:		      discardCard(j, i, state, 0);
    #####: 1118:		      break;
        -: 1119:		    }
    #####: 1120:		  if (j == state->handCount[i])
        -: 1121:		    {
    #####: 1122:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1123:			{
        -: 1124:			  if (DEBUG)
        -: 1125:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1126:			}	
    #####: 1127:		      break;
        -: 1128:		    }		
        -: 1129:		}
        -: 1130:					
        -: 1131:	    }
        -: 1132:				
        -: 1133:	}				
        -: 1134:
        -: 1135:      //discard played card from hand
    #####: 1136:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1137:
    #####: 1138:      return 0;
        -: 1139:
        -: 1140:		
        -: 1141:    case embargo: 
        -: 1142:      //+2 Coins
    #####: 1143:      state->coins = state->coins + 2;
        -: 1144:			
        -: 1145:      //see if selected pile is in play
    #####: 1146:      if ( state->supplyCount[choice1] == -1 )
        -: 1147:	{
    #####: 1148:	  return -1;
        -: 1149:	}
        -: 1150:			
        -: 1151:      //add embargo token to selected supply pile
    #####: 1152:      state->embargoTokens[choice1]++;
        -: 1153:			
        -: 1154:      //trash card
    #####: 1155:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1156:      return 0;
        -: 1157:		
        -: 1158:    case outpost:
        -: 1159:      //set outpost flag
    #####: 1160:      state->outpostPlayed++;
        -: 1161:			
        -: 1162:      //discard card
    #####: 1163:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1164:      return 0;
        -: 1165:		
        -: 1166:    case salvager:
        -: 1167:      //+1 buy
    #####: 1168:      state->numBuys++;
        -: 1169:			
    #####: 1170:      if (choice1)
        -: 1171:	{
        -: 1172:	  //gain coins equal to trashed card
    #####: 1173:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1174:	  //trash card
    #####: 1175:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1176:	}
        -: 1177:			
        -: 1178:      //discard card
    #####: 1179:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1180:      return 0;
        -: 1181:		
        -: 1182:    case sea_hag:
    #####: 1183:      for (i = 0; i < state->numPlayers; i++){
    #####: 1184:	if (i != currentPlayer){
    #####: 1185:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1186:	  state->discardCount[i]++;
    #####: 1187:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1188:	}
        -: 1189:      }
    #####: 1190:      return 0;
        -: 1191:		
        -: 1192:    case treasure_map:
        -: 1193:      //search hand for another treasure_map
    #####: 1194:      index = -1;
    #####: 1195:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1196:	{
    #####: 1197:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1198:	    {
    #####: 1199:	      index = i;
    #####: 1200:	      break;
        -: 1201:	    }
        -: 1202:	}
    #####: 1203:      if (index > -1)
        -: 1204:	{
        -: 1205:	  //trash both treasure cards
    #####: 1206:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1207:	  discardCard(index, currentPlayer, state, 1);
        -: 1208:
        -: 1209:	  //gain 4 Gold cards
    #####: 1210:	  for (i = 0; i < 4; i++)
        -: 1211:	    {
    #####: 1212:	      gainCard(gold, state, 1, currentPlayer);
        -: 1213:	    }
        -: 1214:				
        -: 1215:	  //return success
    #####: 1216:	  return 1;
        -: 1217:	}
        -: 1218:			
        -: 1219:      //no second treasure_map found in hand
    #####: 1220:      return -1;
        -: 1221:    }
        -: 1222:	
    #####: 1223:  return -1;
        -: 1224:}
        -: 1225:
      100: 1226:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1227:{
        -: 1228:	
        -: 1229:  //if card is not trashed, added to Played pile 
      100: 1230:  if (trashFlag < 1)
        -: 1231:    {
        -: 1232:      //add card to played pile
      100: 1233:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      100: 1234:      state->playedCardCount++;
        -: 1235:    }
        -: 1236:	
        -: 1237:  //set played card to -1
      100: 1238:  state->hand[currentPlayer][handPos] = -1;
        -: 1239:	
        -: 1240:  //remove card from player's hand
      100: 1241:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1242:    {
        -: 1243:      //reduce number of cards in hand
    #####: 1244:      state->handCount[currentPlayer]--;
        -: 1245:    }
      100: 1246:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1247:    {
        -: 1248:      //reduce number of cards in hand
    #####: 1249:      state->handCount[currentPlayer]--;
        -: 1250:    }
        -: 1251:  else 	
        -: 1252:    {
        -: 1253:      //replace discarded card with last card in hand
      100: 1254:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1255:      //set last card to -1
      100: 1256:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1257:      //reduce number of cards in hand
      100: 1258:      state->handCount[currentPlayer]--;
        -: 1259:    }
        -: 1260:	
      100: 1261:  return 0;
        -: 1262:}
        -: 1263:
    #####: 1264:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1265:{
        -: 1266:  //Note: supplyPos is enum of choosen card
        -: 1267:	
        -: 1268:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1269:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1270:    {
    #####: 1271:      return -1;
        -: 1272:    }
        -: 1273:	
        -: 1274:  //added card for [whoseTurn] current player:
        -: 1275:  // toFlag = 0 : add to discard
        -: 1276:  // toFlag = 1 : add to deck
        -: 1277:  // toFlag = 2 : add to hand
        -: 1278:
    #####: 1279:  if (toFlag == 1)
        -: 1280:    {
    #####: 1281:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1282:      state->deckCount[player]++;
        -: 1283:    }
    #####: 1284:  else if (toFlag == 2)
        -: 1285:    {
    #####: 1286:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1287:      state->handCount[player]++;
        -: 1288:    }
        -: 1289:  else
        -: 1290:    {
    #####: 1291:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1292:      state->discardCount[player]++;
        -: 1293:    }
        -: 1294:	
        -: 1295:  //decrease number in supply pile
    #####: 1296:  state->supplyCount[supplyPos]--;
        -: 1297:	 
    #####: 1298:  return 0;
        -: 1299:}
        -: 1300:
       49: 1301:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1302:{
        -: 1303:  int i;
        -: 1304:	
        -: 1305:  //reset coin count
       49: 1306:  state->coins = 0;
        -: 1307:
        -: 1308:  //add coins for each Treasure card in player's hand
      294: 1309:  for (i = 0; i < state->handCount[player]; i++)
        -: 1310:    {
      245: 1311:      if (state->hand[player][i] == copper)
        -: 1312:	{
      170: 1313:	  state->coins += 1;
        -: 1314:	}
       75: 1315:      else if (state->hand[player][i] == silver)
        -: 1316:	{
    #####: 1317:	  state->coins += 2;
        -: 1318:	}
       75: 1319:      else if (state->hand[player][i] == gold)
        -: 1320:	{
    #####: 1321:	  state->coins += 3;
        -: 1322:	}	
        -: 1323:    }	
        -: 1324:
        -: 1325:  //add bonus
       49: 1326:  state->coins += bonus;
        -: 1327:
       49: 1328:  return 0;
        -: 1329:}
        -: 1330:
        -: 1331:
        -: 1332://end of dominion.c
