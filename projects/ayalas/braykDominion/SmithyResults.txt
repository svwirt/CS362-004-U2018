Running Random Card Test for Smithy
Hand Test 0 failed: before-293 after-294

Deck Test 0 Test 277 failed: before-275 after-1468332424

Discard Test 0 passed: before-415 after-415
Hand Test 1 failed: before-421 after-422

Deck Test 1 Test 492 failed: before-490 after-1468332424

Discard Test 1 passed: before-149 after-149
Hand Test 2 failed: before-263 after-264

Deck Test 2 Test 190 failed: before-188 after-1468332424

Discard Test 2 passed: before-59 after-59
Hand Test 3 failed: before-236 after-237

Deck Test 3 Test 426 failed: before-424 after-1468332424

Discard Test 3 passed: before-172 after-172
Hand Test 4 failed: before-282 after-283

Deck Test 4 Test 67 failed: before-65 after-1468332424

Discard Test 4 passed: before-429 after-429
Hand Test 5 failed: before-135 after-136

Deck Test 5 Test 123 failed: before-121 after-1468332424

Discard Test 5 passed: before-67 after-67
Hand Test 6 failed: before-69 after-70

Deck Test 6 Test 22 failed: before-20 after-1468332424

Discard Test 6 passed: before-58 after-58
Hand Test 7 failed: before-42 after-43

Deck Test 7 Test 456 failed: before-454 after-1468332424

Discard Test 7 passed: before-11 after-11
Hand Test 8 failed: before-284 after-285

Deck Test 8 Test 421 failed: before-419 after-1468332424

Discard Test 8 passed: before-419 after-419
Hand Test 9 failed: before-370 after-371

Deck Test 9 Test 324 failed: before-322 after-1468332424

Discard Test 9 passed: before-315 after-315
Hand Test 10 failed: before-456 after-457

Deck Test 10 Test 91 failed: before-89 after-1468332424

Discard Test 10 passed: before-480 after-480
Hand Test 11 failed: before-281 after-282

Deck Test 11 Test 170 failed: before-168 after-1468332424

Discard Test 11 passed: before-496 after-496
Hand Test 12 failed: before-336 after-337

Deck Test 12 Test 84 failed: before-82 after-1468332424

Discard Test 12 passed: before-327 after-327
Hand Test 13 failed: before-357 after-358

Deck Test 13 Test 229 failed: before-227 after-1468332424

Discard Test 13 passed: before-313 after-313
Hand Test 14 failed: before-314 after-315

Deck Test 14 Test 82 failed: before-80 after-1468332424

Discard Test 14 passed: before-45 after-45
Hand Test 15 failed: before-250 after-251

Deck Test 15 Test 364 failed: before-362 after-1468332424

Discard Test 15 passed: before-43 after-43
Hand Test 16 failed: before-288 after-289

Deck Test 16 Test 276 failed: before-274 after-1468332424

Discard Test 16 passed: before-178 after-178
Hand Test 17 failed: before-399 after-400

Deck Test 17 Test 151 failed: before-149 after-1468332424

Discard Test 17 passed: before-254 after-254
Hand Test 18 failed: before-239 after-240

Deck Test 18 Test 176 failed: before-174 after-1468332424

Discard Test 18 passed: before-368 after-368
Hand Test 19 failed: before-39 after-40

Deck Test 19 Test 86 failed: before-84 after-1468332424

Discard Test 19 passed: before-94 after-94
Hand Test 20 failed: before-467 after-468

Deck Test 20 Test 434 failed: before-432 after-1468332424

Discard Test 20 passed: before-378 after-378
Hand Test 21 failed: before-492 after-493

Deck Test 21 Test 402 failed: before-400 after-1468332424

Discard Test 21 passed: before-317 after-317
Hand Test 22 failed: before-286 after-287

Deck Test 22 Test 301 failed: before-299 after-1468332424

Discard Test 22 passed: before-280 after-280
Hand Test 23 failed: before-119 after-120

Deck Test 23 Test 189 failed: before-187 after-1468332424

Discard Test 23 passed: before-444 after-444
Hand Test 24 failed: before-97 after-98

Deck Test 24 Test 31 failed: before-29 after-1468332424

Discard Test 24 passed: before-117 after-117
Hand Test 25 failed: before-427 after-428

Deck Test 25 Test 175 failed: before-173 after-1468332424

Discard Test 25 passed: before-209 after-209
Hand Test 26 failed: before-86 after-87

Deck Test 26 Test 497 failed: before-495 after-1468332424

Discard Test 26 passed: before-353 after-353
Hand Test 27 failed: before-124 after-125

Deck Test 27 Test 183 failed: before-181 after-1468332424

Discard Test 27 passed: before-219 after-219
Hand Test 28 failed: before-3 after-4

Deck Test 28 Test 232 failed: before-230 after-1468332424

Discard Test 28 passed: before-329 after-329
Hand Test 29 failed: before-215 after-216

Deck Test 29 Test 368 failed: before-366 after-1468332424

Discard Test 29 passed: before-208 after-208
Hand Test 30 failed: before-118 after-119

Deck Test 30 Test 296 failed: before-294 after-1468332424

Discard Test 30 passed: before-223 after-223
Hand Test 31 failed: before-55 after-56

Deck Test 31 Test 451 failed: before-449 after-1468332424

Discard Test 31 passed: before-421 after-421
Hand Test 32 failed: before-341 after-342

Deck Test 32 Test 264 failed: before-262 after-1468332424

Discard Test 32 passed: before-228 after-228
Hand Test 33 failed: before-264 after-265

Deck Test 33 Test 0 failed: before-32 after-1468332424

Discard Test 33 failed: before-34 after-0
Hand Test 34 failed: before-243 after-244

Deck Test 34 Test 487 failed: before-485 after-1468332424

Discard Test 34 passed: before-356 after-356
Hand Test 35 failed: before-436 after-437

Deck Test 35 Test 365 failed: before-363 after-1468332424

Discard Test 35 passed: before-359 after-359
Hand Test 36 failed: before-275 after-276

Deck Test 36 Test 437 failed: before-435 after-1468332424

Discard Test 36 passed: before-228 after-228
Hand Test 37 failed: before-395 after-396

Deck Test 37 Test 121 failed: before-119 after-1468332424

Discard Test 37 passed: before-358 after-358
Hand Test 38 failed: before-318 after-319

Deck Test 38 Test 235 failed: before-233 after-1468332424

Discard Test 38 passed: before-293 after-293
Hand Test 39 failed: before-29 after-30

Deck Test 39 Test 11 failed: before-9 after-1468332424

Discard Test 39 passed: before-428 after-428
Hand Test 40 failed: before-113 after-114

Deck Test 40 Test 443 failed: before-441 after-1468332424

Discard Test 40 passed: before-263 after-263
Hand Test 41 failed: before-318 after-319

Deck Test 41 Test 340 failed: before-338 after-1468332424

Discard Test 41 passed: before-404 after-404
Hand Test 42 failed: before-417 after-418

Deck Test 42 Test 369 failed: before-367 after-1468332424

Discard Test 42 passed: before-417 after-417
Hand Test 43 failed: before-183 after-184

Deck Test 43 Test 243 failed: before-241 after-1468332424

Discard Test 43 passed: before-470 after-470
Hand Test 44 failed: before-144 after-145

Deck Test 44 Test 272 failed: before-270 after-1468332424

Discard Test 44 passed: before-225 after-225
Hand Test 45 failed: before-286 after-287

Deck Test 45 Test 139 failed: before-137 after-1468332424

Discard Test 45 passed: before-454 after-454
Hand Test 46 failed: before-197 after-198

Deck Test 46 Test 42 failed: before-40 after-1468332424

Discard Test 46 passed: before-464 after-464
Hand Test 47 failed: before-111 after-112

Deck Test 47 Test 304 failed: before-302 after-1468332424

Discard Test 47 passed: before-348 after-348
Hand Test 48 failed: before-246 after-247

Deck Test 48 Test 299 failed: before-297 after-1468332424

Discard Test 48 passed: before-343 after-343
Hand Test 49 failed: before-310 after-311

Deck Test 49 Test 422 failed: before-420 after-1468332424

Discard Test 49 passed: before-311 after-311
Hand Test 50 failed: before-378 after-379

Deck Test 50 Test 161 failed: before-159 after-1468332424

Discard Test 50 passed: before-230 after-230
Hand Test 51 failed: before-126 after-127

Deck Test 51 Test 236 failed: before-234 after-1468332424

Discard Test 51 passed: before-444 after-444
Hand Test 52 failed: before-282 after-283

Deck Test 52 Test 208 failed: before-206 after-1468332424

Discard Test 52 passed: before-416 after-416
Hand Test 53 failed: before-124 after-125

Deck Test 53 Test 137 failed: before-135 after-1468332424

Discard Test 53 passed: before-62 after-62
Hand Test 54 failed: before-379 after-380

Deck Test 54 Test 452 failed: before-450 after-1468332424

Discard Test 54 passed: before-399 after-399
Hand Test 55 failed: before-131 after-132

Deck Test 55 Test 71 failed: before-69 after-1468332424

Discard Test 55 passed: before-473 after-473
Hand Test 56 failed: before-160 after-161

Deck Test 56 Test 433 failed: before-431 after-1468332424

Discard Test 56 passed: before-394 after-394
Hand Test 57 failed: before-496 after-497

Deck Test 57 Test 481 failed: before-479 after-1468332424

Discard Test 57 passed: before-399 after-399
Hand Test 58 failed: before-190 after-191

Deck Test 58 Test 313 failed: before-311 after-1468332424

Discard Test 58 passed: before-168 after-168
Hand Test 59 failed: before-340 after-341

Deck Test 59 Test 466 failed: before-464 after-1468332424

Discard Test 59 passed: before-84 after-84
Hand Test 60 failed: before-436 after-437

Deck Test 60 Test 376 failed: before-374 after-1468332424

Discard Test 60 passed: before-42 after-42
Hand Test 61 failed: before-418 after-419

Deck Test 61 Test 256 failed: before-254 after-1468332424

Discard Test 61 passed: before-179 after-179
Hand Test 62 failed: before-159 after-160

Deck Test 62 Test 348 failed: before-346 after-1468332424

Discard Test 62 passed: before-172 after-172
Hand Test 63 failed: before-87 after-88

Deck Test 63 Test 210 failed: before-208 after-1468332424

Discard Test 63 passed: before-342 after-342
Hand Test 64 failed: before-321 after-322

Deck Test 64 Test 213 failed: before-211 after-1468332424

Discard Test 64 passed: before-372 after-372
Hand Test 65 failed: before-404 after-405

Deck Test 65 Test 99 failed: before-97 after-1468332424

Discard Test 65 passed: before-221 after-221
Hand Test 66 failed: before-205 after-206

Deck Test 66 Test 440 failed: before-438 after-1468332424

Discard Test 66 passed: before-167 after-167
Hand Test 67 failed: before-158 after-159

Deck Test 67 Test 150 failed: before-148 after-1468332424

Discard Test 67 passed: before-484 after-484
Hand Test 68 failed: before-396 after-397

Deck Test 68 Test 422 failed: before-420 after-1468332424

Discard Test 68 passed: before-269 after-269
Hand Test 69 failed: before-472 after-473

Deck Test 69 Test 84 failed: before-82 after-1468332424

Discard Test 69 passed: before-292 after-292
Hand Test 70 failed: before-222 after-223

Deck Test 70 Test 125 failed: before-123 after-1468332424

Discard Test 70 passed: before-385 after-385
Hand Test 71 failed: before-213 after-214

Deck Test 71 Test 42 failed: before-40 after-1468332424

Discard Test 71 passed: before-398 after-398
Hand Test 72 failed: before-209 after-210

Deck Test 72 Test 24 failed: before-22 after-1468332424

Discard Test 72 passed: before-90 after-90
Hand Test 73 failed: before-155 after-156

Deck Test 73 Test 336 failed: before-334 after-1468332424

Discard Test 73 passed: before-232 after-232
Hand Test 74 failed: before-273 after-274

Deck Test 74 Test 379 failed: before-377 after-1468332424

Discard Test 74 passed: before-269 after-269
Hand Test 75 failed: before-142 after-143

Deck Test 75 Test 255 failed: before-253 after-1468332424

Discard Test 75 passed: before-360 after-360
Hand Test 76 failed: before-121 after-122

Deck Test 76 Test 493 failed: before-491 after-1468332424

Discard Test 76 passed: before-205 after-205
Hand Test 77 failed: before-254 after-255

Deck Test 77 Test 113 failed: before-111 after-1468332424

Discard Test 77 passed: before-461 after-461
Hand Test 78 failed: before-202 after-203

Deck Test 78 Test 444 failed: before-442 after-1468332424

Discard Test 78 passed: before-202 after-202
Hand Test 79 failed: before-368 after-369

Deck Test 79 Test 21 failed: before-19 after-1468332424

Discard Test 79 passed: before-342 after-342
Hand Test 80 failed: before-458 after-459

Deck Test 80 Test 372 failed: before-370 after-1468332424

Discard Test 80 passed: before-408 after-408
Hand Test 81 failed: before-248 after-249

Deck Test 81 Test 308 failed: before-306 after-1468332424

Discard Test 81 passed: before-253 after-253
Hand Test 82 failed: before-390 after-391

Deck Test 82 Test 133 failed: before-131 after-1468332424

Discard Test 82 passed: before-148 after-148
Hand Test 83 failed: before-29 after-30

Deck Test 83 Test 246 failed: before-244 after-1468332424

Discard Test 83 passed: before-368 after-368
Hand Test 84 failed: before-249 after-250

Deck Test 84 Test 288 failed: before-286 after-1468332424

Discard Test 84 passed: before-297 after-297
Hand Test 85 failed: before-497 after-498

Deck Test 85 Test 33 failed: before-31 after-1468332424

Discard Test 85 passed: before-363 after-363
Hand Test 86 failed: before-152 after-153

Deck Test 86 Test 186 failed: before-184 after-1468332424

Discard Test 86 passed: before-125 after-125
Hand Test 87 failed: before-229 after-230

Deck Test 87 Test 188 failed: before-186 after-1468332424

Discard Test 87 passed: before-157 after-157
Hand Test 88 failed: before-460 after-461

Deck Test 88 Test 414 failed: before-412 after-1468332424

Discard Test 88 passed: before-421 after-421
Hand Test 89 failed: before-248 after-249

Deck Test 89 Test 27 failed: before-25 after-1468332424

Discard Test 89 passed: before-50 after-50
Hand Test 90 failed: before-199 after-200

Deck Test 90 Test 294 failed: before-292 after-1468332424

Discard Test 90 passed: before-197 after-197
Hand Test 91 failed: before-403 after-404

Deck Test 91 Test 2 failed: before-0 after-1468332424

Discard Test 91 passed: before-428 after-428
Hand Test 92 failed: before-159 after-160

Deck Test 92 Test 147 failed: before-145 after-1468332424

Discard Test 92 passed: before-38 after-38
Hand Test 93 failed: before-192 after-193

Deck Test 93 Test 134 failed: before-132 after-1468332424

Discard Test 93 passed: before-339 after-339
Hand Test 94 failed: before-49 after-50

Deck Test 94 Test 4 failed: before-2 after-1468332424

Discard Test 94 passed: before-129 after-129
Hand Test 95 failed: before-335 after-336

Deck Test 95 Test 429 failed: before-427 after-1468332424

Discard Test 95 passed: before-343 after-343
Hand Test 96 failed: before-449 after-450

Deck Test 96 Test 238 failed: before-236 after-1468332424

Discard Test 96 passed: before-471 after-471
Hand Test 97 failed: before-295 after-296

Deck Test 97 Test 488 failed: before-486 after-1468332424

Discard Test 97 passed: before-292 after-292
Hand Test 98 failed: before-182 after-183

Deck Test 98 Test 329 failed: before-327 after-1468332424

Discard Test 98 passed: before-390 after-390
Hand Test 99 failed: before-232 after-233

Deck Test 99 Test 69 failed: before-67 after-1468332424

Discard Test 99 passed: before-326 after-326


Status: 201 failured and 99 passed tests
100 games run
File 'dominion.c'
Lines executed:23.94% of 564
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
     1988:    8:int compare(const void* a, const void* b) {
     1988:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
     1988:   11:  if (*(int*)a < *(int*)b)
      508:   12:    return -1;
     1480:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
      100:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      100:   44:  SelectStream(1);
      100:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
      100:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
       51:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       49:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      539:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     5390:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     4900:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       49:   73:  if (numPlayers == 2)
        -:   74:    {
       20:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
       29:   77:  else if (numPlayers == 3)
        -:   78:    {
       29:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       49:   87:  if (numPlayers == 2)
        -:   88:    {
       20:   89:      state->supplyCount[estate] = 8;
       20:   90:      state->supplyCount[duchy] = 8;
       20:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
       29:   95:      state->supplyCount[estate] = 12;
       29:   96:      state->supplyCount[duchy] = 12;
       29:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       49:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       49:  102:  state->supplyCount[silver] = 40;
       49:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     1029:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     8085:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     7595:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      490:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       98:  115:		  if (numPlayers == 2){ 
       20:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
       29:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      441:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      490:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     7105:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      176:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
      127:  140:      state->deckCount[i] = 0;
      508:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
      381:  143:	  state->deck[i][j] = estate;
      381:  144:	  state->deckCount[i]++;
        -:  145:	}
     1016:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      889:  148:	  state->deck[i][j] = copper;
      889:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      176:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
      127:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      176:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      127:  166:      state->handCount[i] = 0;
      127:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     1372:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
     1323:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       49:  182:  state->outpostPlayed = 0;
       49:  183:  state->phase = 0;
       49:  184:  state->numActions = 1;
       49:  185:  state->numBuys = 1;
       49:  186:  state->playedCardCount = 0;
       49:  187:  state->whoseTurn = 0;
       49:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      294:  192:  for (it = 0; it < 5; it++){
      245:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       49:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       49:  198:  return 0;
        -:  199:}
        -:  200:
      128:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      128:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      128:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
      128:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     1560:  214:  while (state->deckCount[player] > 0) {
     1304:  215:    card = floor(Random() * state->deckCount[player]);
     1304:  216:    newDeck[newDeckPos] = state->deck[player][card];
     1304:  217:    newDeckPos++;
     4513:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
     3209:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     1304:  221:    state->deckCount[player]--;
        -:  222:  }
     1432:  223:  for (i = 0; i < newDeckPos; i++) {
     1304:  224:    state->deck[player][i] = newDeck[i];
     1304:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      128:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
      200:  346:int whoseTurn(struct gameState *state) {
      200:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
      445:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      445:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       35:  533:    for (i = 0; i < state->discardCount[player];i++){
       34:  534:      state->deck[player][i] = state->discard[player][i];
       34:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        1:  538:    state->deckCount[player] = state->discardCount[player];
        1:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        1:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        1:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        1:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        1:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        1:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
        1:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        1:  563:    state->deckCount[player]--;
        1:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      444:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      444:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      444:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      444:  576:    state->deckCount[player]--;
      444:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      445:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:
      100:  647:int playSmithy(struct gameState *state, int handPos)
        -:  648:{
      100:  649:  int currentPlayer = whoseTurn(state);
      300:  650:  for (int i = 0; i < 2; i++)
        -:  651:  {
      200:  652:    drawCard(currentPlayer, state);
        -:  653:  }
        -:  654:        
        -:  655:  //discard card from hand
      100:  656:  discardCard(handPos, currentPlayer, state, 0);
      100:  657:  return 0;
        -:  658:}
        -:  659:
        -:  660:
    #####:  661:int playAdventurer(struct gameState *state)
        -:  662:{
    #####:  663:  int currentPlayer = whoseTurn(state);
    #####:  664:  int drawntreasure=0;
        -:  665:  int cardDrawn;
        -:  666:  int temphand[MAX_HAND];// moved above the if statement
    #####:  667:  int z = 0;// this is the counter for the temp hand
        -:  668:
    #####:  669:  while(drawntreasure<2) {
    #####:  670:    if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
    #####:  671:      shuffle(currentPlayer, state);
        -:  672:    }
        -:  673:
    #####:  674:    drawCard(currentPlayer, state);
    #####:  675:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  676:    
    #####:  677:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) {
    #####:  678:      drawntreasure++;
        -:  679:    }
        -:  680:    else {
    #####:  681:      temphand[z]=cardDrawn;
    #####:  682:      state->handCount[currentPlayer]++; //this should just remove the top card (the most recently drawn one).
    #####:  683:      z++;
        -:  684:    }
        -:  685:  }
        -:  686:
    #####:  687:  while(z-1>=0) {
    #####:  688:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  689:    z=z-1;
        -:  690:  }
        -:  691:
    #####:  692:  return 0;
        -:  693:}
        -:  694:
        -:  695:
    #####:  696:int playRemodel(struct gameState *state, int handPos, int choice1, int choice2)
        -:  697:{
    #####:  698:  int currentPlayer = whoseTurn(state);
        -:  699:  int j;
        -:  700:
    #####:  701:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  702:
    #####:  703:  if ((getCost(state->hand[currentPlayer][choice1]) + 0) > getCost(choice2))
        -:  704:  {
    #####:  705:      return -1;
        -:  706:  }
        -:  707:
    #####:  708:  gainCard(choice2, state, 0, currentPlayer);
        -:  709:
        -:  710:  //discard card from hand
    #####:  711:  discardCard(handPos, currentPlayer, state, 0);
        -:  712:
        -:  713:  //discard trashed card
    #####:  714:  for (int i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  715:    if (state->hand[currentPlayer][i] == j) {
    #####:  716:      discardCard(i, currentPlayer, state, 0);			
    #####:  717:      break;
        -:  718:    }
        -:  719:  }
        -:  720:
    #####:  721:  return 0;
        -:  722:}
        -:  723:
        -:  724:
    #####:  725:int playSeaHag(struct gameState *state)
        -:  726:{
    #####:  727:  int currentPlayer = whoseTurn(state);
        -:  728:
    #####:  729:  for (int i = 0; i < state->numPlayers; i++){
    #####:  730:    if (i != currentPlayer) {
    #####:  731:      state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    
    #####:  732:      state->deckCount[i]--;
    #####:  733:      state->discardCount[i]++;
    #####:  734:      state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:  735:    }
        -:  736:  }
        -:  737:
    #####:  738:  return 0;
        -:  739:}
        -:  740:
        -:  741:
    #####:  742:int playCouncilRoom(struct gameState *state, int handPos)
        -:  743:{
    #####:  744:  int currentPlayer = whoseTurn(state);
        -:  745:  
        -:  746:  //+4 Cards
    #####:  747:  for (int i = 0; i < 2; i++) {
    #####:  748:    drawCard(currentPlayer, state);
        -:  749:  }
        -:  750:
        -:  751:  //+1 Buy
    #####:  752:  state->numBuys++;
        -:  753:
        -:  754:  //Each other player draws a card
    #####:  755:  for (int i = 0; i < state->numPlayers; i++) {
    #####:  756:    if (i != currentPlayer) {
    #####:  757:      drawCard(i, state);
        -:  758:    }
        -:  759:  }
        -:  760:
        -:  761:  //put played card in played card pile
    #####:  762:  discardCard(handPos, currentPlayer, state, 0);
        -:  763:
    #####:  764:  return 0;
        -:  765:}
        -:  766:
        -:  767:
      100:  768:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  769:{
        -:  770:  int i;
        -:  771:  int j;
        -:  772:  int k;
        -:  773:  int x;
        -:  774:  int index;
      100:  775:  int currentPlayer = whoseTurn(state);
      100:  776:  int nextPlayer = currentPlayer + 1;
        -:  777:
      100:  778:  int tributeRevealedCards[2] = {-1, -1};
        -:  779:  int temphand[MAX_HAND];// moved above the if statement
      100:  780:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  781:    nextPlayer = 0;
        -:  782:  }
        -:  783:  
        -:  784:	
        -:  785:  //uses switch to select card and perform actions
      100:  786:  switch( card ) 
        -:  787:    {
        -:  788:    case adventurer:
    #####:  789:      return playAdventurer(state);
        -:  790:			
        -:  791:    case council_room:
    #####:  792:      return playCouncilRoom(state, handPos);
        -:  793:			
        -:  794:    case feast:
        -:  795:      //gain card with cost up to 5
        -:  796:      //Backup hand
    #####:  797:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  798:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  799:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  800:      }
        -:  801:      //Backup hand
        -:  802:
        -:  803:      //Update Coins for Buy
    #####:  804:      updateCoins(currentPlayer, state, 5);
    #####:  805:      x = 1;//Condition to loop on
    #####:  806:      while( x == 1) {//Buy one card
    #####:  807:	if (supplyCount(choice1, state) <= 0){
        -:  808:	  if (DEBUG)
        -:  809:	    printf("None of that card left, sorry!\n");
        -:  810:
        -:  811:	  if (DEBUG){
        -:  812:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  813:	  }
        -:  814:	}
    #####:  815:	else if (state->coins < getCost(choice1)){
    #####:  816:	  printf("That card is too expensive!\n");
        -:  817:
        -:  818:	  if (DEBUG){
        -:  819:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  820:	  }
        -:  821:	}
        -:  822:	else{
        -:  823:
        -:  824:	  if (DEBUG){
        -:  825:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  826:	  }
        -:  827:
    #####:  828:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  829:	  x = 0;//No more buying cards
        -:  830:
        -:  831:	  if (DEBUG){
        -:  832:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  833:	  }
        -:  834:
        -:  835:	}
        -:  836:      }     
        -:  837:
        -:  838:      //Reset Hand
    #####:  839:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  840:	state->hand[currentPlayer][i] = temphand[i];
    #####:  841:	temphand[i] = -1;
        -:  842:      }
        -:  843:      //Reset Hand
        -:  844:      			
    #####:  845:      return 0;
        -:  846:			
        -:  847:    case gardens:
    #####:  848:      return -1;
        -:  849:			
        -:  850:    case mine:
    #####:  851:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  852:
    #####:  853:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  854:	{
    #####:  855:	  return -1;
        -:  856:	}
        -:  857:		
    #####:  858:      if (choice2 > treasure_map || choice2 < curse)
        -:  859:	{
    #####:  860:	  return -1;
        -:  861:	}
        -:  862:
    #####:  863:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  864:	{
    #####:  865:	  return -1;
        -:  866:	}
        -:  867:
    #####:  868:      gainCard(choice2, state, 2, currentPlayer);
        -:  869:
        -:  870:      //discard card from hand
    #####:  871:      discardCard(handPos, currentPlayer, state, 0);
        -:  872:
        -:  873:      //discard trashed card
    #####:  874:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  875:	{
    #####:  876:	  if (state->hand[currentPlayer][i] == j)
        -:  877:	    {
    #####:  878:	      discardCard(i, currentPlayer, state, 0);			
    #####:  879:	      break;
        -:  880:	    }
        -:  881:	}
        -:  882:			
    #####:  883:      return 0;
        -:  884:			
        -:  885:    case remodel:
    #####:  886:      return playRemodel(state, handPos, choice1, choice2);
        -:  887:		
        -:  888:    case smithy:
      100:  889:      return playSmithy(state, handPos);
        -:  890:		
        -:  891:    case village:
        -:  892:      //+1 Card
    #####:  893:      drawCard(currentPlayer, state);
        -:  894:			
        -:  895:      //+2 Actions
    #####:  896:      state->numActions = state->numActions + 2;
        -:  897:			
        -:  898:      //discard played card from hand
    #####:  899:      discardCard(handPos, currentPlayer, state, 0);
    #####:  900:      return 0;
        -:  901:		
        -:  902:    case baron:
    #####:  903:      state->numBuys++;//Increase buys by 1!
    #####:  904:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  905:	int p = 0;//Iterator for hand!
    #####:  906:	int card_not_discarded = 1;//Flag for discard set!
    #####:  907:	while(card_not_discarded){
    #####:  908:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  909:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  910:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  911:	    state->discardCount[currentPlayer]++;
    #####:  912:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  913:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  914:	    }
    #####:  915:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  916:	    state->handCount[currentPlayer]--;
    #####:  917:	    card_not_discarded = 0;//Exit the loop
        -:  918:	  }
    #####:  919:	  else if (p > state->handCount[currentPlayer]){
        -:  920:	    if(DEBUG) {
        -:  921:	      printf("No estate cards in your hand, invalid choice\n");
        -:  922:	      printf("Must gain an estate if there are any\n");
        -:  923:	    }
    #####:  924:	    if (supplyCount(estate, state) > 0){
    #####:  925:	      gainCard(estate, state, 0, currentPlayer);
    #####:  926:	      state->supplyCount[estate]--;//Decrement estates
    #####:  927:	      if (supplyCount(estate, state) == 0){
    #####:  928:		isGameOver(state);
        -:  929:	      }
        -:  930:	    }
    #####:  931:	    card_not_discarded = 0;//Exit the loop
        -:  932:	  }
        -:  933:			    
        -:  934:	  else{
    #####:  935:	    p++;//Next card
        -:  936:	  }
        -:  937:	}
        -:  938:      }
        -:  939:			    
        -:  940:      else{
    #####:  941:	if (supplyCount(estate, state) > 0){
    #####:  942:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  943:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  944:	  if (supplyCount(estate, state) == 0){
    #####:  945:	    isGameOver(state);
        -:  946:	  }
        -:  947:	}
        -:  948:      }
        -:  949:	    
        -:  950:      
    #####:  951:      return 0;
        -:  952:		
        -:  953:    case great_hall:
        -:  954:      //+1 Card
    #####:  955:      drawCard(currentPlayer, state);
        -:  956:			
        -:  957:      //+1 Actions
    #####:  958:      state->numActions++;
        -:  959:			
        -:  960:      //discard card from hand
    #####:  961:      discardCard(handPos, currentPlayer, state, 0);
    #####:  962:      return 0;
        -:  963:		
        -:  964:    case minion:
        -:  965:      //+1 action
    #####:  966:      state->numActions++;
        -:  967:			
        -:  968:      //discard card from hand
    #####:  969:      discardCard(handPos, currentPlayer, state, 0);
        -:  970:			
    #####:  971:      if (choice1)		//+2 coins
        -:  972:	{
    #####:  973:	  state->coins = state->coins + 2;
        -:  974:	}
        -:  975:			
    #####:  976:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  977:	{
        -:  978:	  //discard hand
    #####:  979:	  while(numHandCards(state) > 0)
        -:  980:	    {
    #####:  981:	      discardCard(handPos, currentPlayer, state, 0);
        -:  982:	    }
        -:  983:				
        -:  984:	  //draw 4
    #####:  985:	  for (i = 0; i < 4; i++)
        -:  986:	    {
    #####:  987:	      drawCard(currentPlayer, state);
        -:  988:	    }
        -:  989:				
        -:  990:	  //other players discard hand and redraw if hand size > 4
    #####:  991:	  for (i = 0; i < state->numPlayers; i++)
        -:  992:	    {
    #####:  993:	      if (i != currentPlayer)
        -:  994:		{
    #####:  995:		  if ( state->handCount[i] > 4 )
        -:  996:		    {
        -:  997:		      //discard hand
    #####:  998:		      while( state->handCount[i] > 0 )
        -:  999:			{
    #####: 1000:			  discardCard(handPos, i, state, 0);
        -: 1001:			}
        -: 1002:							
        -: 1003:		      //draw 4
    #####: 1004:		      for (j = 0; j < 4; j++)
        -: 1005:			{
    #####: 1006:			  drawCard(i, state);
        -: 1007:			}
        -: 1008:		    }
        -: 1009:		}
        -: 1010:	    }
        -: 1011:				
        -: 1012:	}
    #####: 1013:      return 0;
        -: 1014:		
        -: 1015:    case steward:
    #####: 1016:      if (choice1 == 1)
        -: 1017:	{
        -: 1018:	  //+2 cards
    #####: 1019:	  drawCard(currentPlayer, state);
    #####: 1020:	  drawCard(currentPlayer, state);
        -: 1021:	}
    #####: 1022:      else if (choice1 == 2)
        -: 1023:	{
        -: 1024:	  //+2 coins
    #####: 1025:	  state->coins = state->coins + 2;
        -: 1026:	}
        -: 1027:      else
        -: 1028:	{
        -: 1029:	  //trash 2 cards in hand
    #####: 1030:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1031:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1032:	}
        -: 1033:			
        -: 1034:      //discard card from hand
    #####: 1035:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1036:      return 0;
        -: 1037:		
        -: 1038:    case tribute:
    #####: 1039:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1040:	if (state->deckCount[nextPlayer] > 0){
    #####: 1041:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1042:	  state->deckCount[nextPlayer]--;
        -: 1043:	}
    #####: 1044:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1045:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1046:	  state->discardCount[nextPlayer]--;
        -: 1047:	}
        -: 1048:	else{
        -: 1049:	  //No Card to Reveal
        -: 1050:	  if (DEBUG){
        -: 1051:	    printf("No cards to reveal\n");
        -: 1052:	  }
        -: 1053:	}
        -: 1054:      }
        -: 1055:	    
        -: 1056:      else{
    #####: 1057:	if (state->deckCount[nextPlayer] == 0){
    #####: 1058:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1059:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1060:	    state->deckCount[nextPlayer]++;
    #####: 1061:	    state->discard[nextPlayer][i] = -1;
    #####: 1062:	    state->discardCount[nextPlayer]--;
        -: 1063:	  }
        -: 1064:			    
    #####: 1065:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1066:	} 
    #####: 1067:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1068:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1069:	state->deckCount[nextPlayer]--;
    #####: 1070:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1071:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1072:	state->deckCount[nextPlayer]--;
        -: 1073:      }    
        -: 1074:		       
    #####: 1075:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1076:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1077:	state->playedCardCount++;
    #####: 1078:	tributeRevealedCards[1] = -1;
        -: 1079:      }
        -: 1080:
    #####: 1081:      for (i = 0; i <= 2; i ++){
    #####: 1082:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1083:	  state->coins += 2;
        -: 1084:	}
        -: 1085:		    
    #####: 1086:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1087:	  drawCard(currentPlayer, state);
    #####: 1088:	  drawCard(currentPlayer, state);
        -: 1089:	}
        -: 1090:	else{//Action Card
    #####: 1091:	  state->numActions = state->numActions + 2;
        -: 1092:	}
        -: 1093:      }
        -: 1094:	    
    #####: 1095:      return 0;
        -: 1096:		
        -: 1097:    case ambassador:
    #####: 1098:      j = 0;		//used to check if player has enough cards to discard
        -: 1099:
    #####: 1100:      if (choice2 > 2 || choice2 < 0)
        -: 1101:	{
    #####: 1102:	  return -1;				
        -: 1103:	}
        -: 1104:
    #####: 1105:      if (choice1 == handPos)
        -: 1106:	{
    #####: 1107:	  return -1;
        -: 1108:	}
        -: 1109:
    #####: 1110:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1111:	{
    #####: 1112:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1113:	    {
    #####: 1114:	      j++;
        -: 1115:	    }
        -: 1116:	}
    #####: 1117:      if (j < choice2)
        -: 1118:	{
    #####: 1119:	  return -1;				
        -: 1120:	}
        -: 1121:
        -: 1122:      if (DEBUG) 
        -: 1123:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1124:
        -: 1125:      //increase supply count for choosen card by amount being discarded
    #####: 1126:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1127:			
        -: 1128:      //each other player gains a copy of revealed card
    #####: 1129:      for (i = 0; i < state->numPlayers; i++)
        -: 1130:	{
    #####: 1131:	  if (i != currentPlayer)
        -: 1132:	    {
    #####: 1133:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1134:	    }
        -: 1135:	}
        -: 1136:
        -: 1137:      //discard played card from hand
    #####: 1138:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1139:
        -: 1140:      //trash copies of cards returned to supply
    #####: 1141:      for (j = 0; j < choice2; j++)
        -: 1142:	{
    #####: 1143:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1144:	    {
    #####: 1145:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1146:		{
    #####: 1147:		  discardCard(i, currentPlayer, state, 1);
    #####: 1148:		  break;
        -: 1149:		}
        -: 1150:	    }
        -: 1151:	}			
        -: 1152:
    #####: 1153:      return 0;
        -: 1154:		
        -: 1155:    case cutpurse:
        -: 1156:
    #####: 1157:      updateCoins(currentPlayer, state, 2);
    #####: 1158:      for (i = 0; i < state->numPlayers; i++)
        -: 1159:	{
    #####: 1160:	  if (i != currentPlayer)
        -: 1161:	    {
    #####: 1162:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1163:		{
    #####: 1164:		  if (state->hand[i][j] == copper)
        -: 1165:		    {
    #####: 1166:		      discardCard(j, i, state, 0);
    #####: 1167:		      break;
        -: 1168:		    }
    #####: 1169:		  if (j == state->handCount[i])
        -: 1170:		    {
    #####: 1171:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1172:			{
        -: 1173:			  if (DEBUG)
        -: 1174:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1175:			}	
    #####: 1176:		      break;
        -: 1177:		    }		
        -: 1178:		}
        -: 1179:					
        -: 1180:	    }
        -: 1181:				
        -: 1182:	}				
        -: 1183:
        -: 1184:      //discard played card from hand
    #####: 1185:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1186:
    #####: 1187:      return 0;
        -: 1188:
        -: 1189:		
        -: 1190:    case embargo: 
        -: 1191:      //+2 Coins
    #####: 1192:      state->coins = state->coins + 2;
        -: 1193:			
        -: 1194:      //see if selected pile is in play
    #####: 1195:      if ( state->supplyCount[choice1] == -1 )
        -: 1196:	{
    #####: 1197:	  return -1;
        -: 1198:	}
        -: 1199:			
        -: 1200:      //add embargo token to selected supply pile
    #####: 1201:      state->embargoTokens[choice1]++;
        -: 1202:			
        -: 1203:      //trash card
    #####: 1204:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1205:      return 0;
        -: 1206:		
        -: 1207:    case outpost:
        -: 1208:      //set outpost flag
    #####: 1209:      state->outpostPlayed++;
        -: 1210:			
        -: 1211:      //discard card
    #####: 1212:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1213:      return 0;
        -: 1214:		
        -: 1215:    case salvager:
        -: 1216:      //+1 buy
    #####: 1217:      state->numBuys++;
        -: 1218:			
    #####: 1219:      if (choice1)
        -: 1220:	{
        -: 1221:	  //gain coins equal to trashed card
    #####: 1222:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1223:	  //trash card
    #####: 1224:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1225:	}
        -: 1226:			
        -: 1227:      //discard card
    #####: 1228:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1229:      return 0;
        -: 1230:		
        -: 1231:    case sea_hag:
    #####: 1232:      return playSeaHag(state);
        -: 1233:		
        -: 1234:    case treasure_map:
        -: 1235:      //search hand for another treasure_map
    #####: 1236:      index = -1;
    #####: 1237:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1238:	{
    #####: 1239:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1240:	    {
    #####: 1241:	      index = i;
    #####: 1242:	      break;
        -: 1243:	    }
        -: 1244:	}
    #####: 1245:      if (index > -1)
        -: 1246:	{
        -: 1247:	  //trash both treasure cards
    #####: 1248:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1249:	  discardCard(index, currentPlayer, state, 1);
        -: 1250:
        -: 1251:	  //gain 4 Gold cards
    #####: 1252:	  for (i = 0; i < 4; i++)
        -: 1253:	    {
    #####: 1254:	      gainCard(gold, state, 1, currentPlayer);
        -: 1255:	    }
        -: 1256:				
        -: 1257:	  //return success
    #####: 1258:	  return 1;
        -: 1259:	}
        -: 1260:			
        -: 1261:      //no second treasure_map found in hand
    #####: 1262:      return -1;
        -: 1263:    }
        -: 1264:	
    #####: 1265:  return -1;
        -: 1266:}
        -: 1267:
      100: 1268:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1269:{
        -: 1270:	
        -: 1271:  //if card is not trashed, added to Played pile 
      100: 1272:  if (trashFlag < 1)
        -: 1273:    {
        -: 1274:      //add card to played pile
      100: 1275:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      100: 1276:      state->playedCardCount++;
        -: 1277:    }
        -: 1278:	
        -: 1279:  //set played card to -1
      100: 1280:  state->hand[currentPlayer][handPos] = -1;
        -: 1281:	
        -: 1282:  //remove card from player's hand
      100: 1283:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1284:    {
        -: 1285:      //reduce number of cards in hand
    #####: 1286:      state->handCount[currentPlayer]--;
        -: 1287:    }
      100: 1288:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1289:    {
        -: 1290:      //reduce number of cards in hand
    #####: 1291:      state->handCount[currentPlayer]--;
        -: 1292:    }
        -: 1293:  else 	
        -: 1294:    {
        -: 1295:      //replace discarded card with last card in hand
      100: 1296:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1297:      //set last card to -1
      100: 1298:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1299:      //reduce number of cards in hand
      100: 1300:      state->handCount[currentPlayer]--;
        -: 1301:    }
        -: 1302:	
      100: 1303:  return 0;
        -: 1304:}
        -: 1305:
    #####: 1306:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1307:{
        -: 1308:  //Note: supplyPos is enum of choosen card
        -: 1309:	
        -: 1310:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1311:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1312:    {
    #####: 1313:      return -1;
        -: 1314:    }
        -: 1315:	
        -: 1316:  //added card for [whoseTurn] current player:
        -: 1317:  // toFlag = 0 : add to discard
        -: 1318:  // toFlag = 1 : add to deck
        -: 1319:  // toFlag = 2 : add to hand
        -: 1320:
    #####: 1321:  if (toFlag == 1)
        -: 1322:    {
    #####: 1323:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1324:      state->deckCount[player]++;
        -: 1325:    }
    #####: 1326:  else if (toFlag == 2)
        -: 1327:    {
    #####: 1328:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1329:      state->handCount[player]++;
        -: 1330:    }
        -: 1331:  else
        -: 1332:    {
    #####: 1333:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1334:      state->discardCount[player]++;
        -: 1335:    }
        -: 1336:	
        -: 1337:  //decrease number in supply pile
    #####: 1338:  state->supplyCount[supplyPos]--;
        -: 1339:	 
    #####: 1340:  return 0;
        -: 1341:}
        -: 1342:
       49: 1343:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1344:{
        -: 1345:  int i;
        -: 1346:	
        -: 1347:  //reset coin count
       49: 1348:  state->coins = 0;
        -: 1349:
        -: 1350:  //add coins for each Treasure card in player's hand
      294: 1351:  for (i = 0; i < state->handCount[player]; i++)
        -: 1352:    {
      245: 1353:      if (state->hand[player][i] == copper)
        -: 1354:	{
      170: 1355:	  state->coins += 1;
        -: 1356:	}
       75: 1357:      else if (state->hand[player][i] == silver)
        -: 1358:	{
    #####: 1359:	  state->coins += 2;
        -: 1360:	}
       75: 1361:      else if (state->hand[player][i] == gold)
        -: 1362:	{
    #####: 1363:	  state->coins += 3;
        -: 1364:	}	
        -: 1365:    }	
        -: 1366:
        -: 1367:  //add bonus
       49: 1368:  state->coins += bonus;
        -: 1369:
       49: 1370:  return 0;
        -: 1371:}
        -: 1372:
        -: 1373:
        -: 1374://end of dominion.c
