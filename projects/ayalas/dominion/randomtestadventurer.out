Running Random Card Test for Adventurer
Hand Test 0 failed: before-293 after-2503

Deck Test 0 Test 277 failed: before-0 after--468616824

Discard Test 0 failed: before-415 after-10
Hand Test 1 failed: before-421 after-2503

Deck Test 1 Test 492 failed: before-0 after--468616824

Discard Test 1 failed: before-149 after-435
Hand Test 2 failed: before-263 after-826

Deck Test 2 Test 190 failed: before-0 after--468616824

Discard Test 2 failed: before-59 after-315
Hand Test 3 failed: before-236 after-2503

Deck Test 3 Test 426 failed: before-0 after--468616824

Discard Test 3 failed: before-172 after-161
Hand Test 4 failed: before-282 after-1383

Deck Test 4 Test 67 failed: before-0 after--468616824

Discard Test 4 failed: before-429 after-103
Hand Test 5 failed: before-135 after-622

Deck Test 5 Test 123 failed: before-0 after--468616824

Discard Test 5 failed: before-67 after-298
Hand Test 6 failed: before-69 after-360

Deck Test 6 Test 22 failed: before-0 after--468616824

Discard Test 6 failed: before-58 after-212
Hand Test 7 failed: before-42 after-622

Deck Test 7 Test 456 failed: before-165 after--468616824

Discard Test 7 failed: before-11 after-301
Hand Test 8 failed: before-284 after-622

Deck Test 8 Test 421 failed: before-251 after--468616824

Discard Test 8 failed: before-419 after-588
Hand Test 9 failed: before-370 after-622

Deck Test 9 Test 324 failed: before-197 after--468616824

Discard Test 9 failed: before-315 after-441
Hand Test 10 failed: before-456 after-2503

Deck Test 10 Test 91 failed: before-0 after--468616824

Discard Test 10 failed: before-480 after-470
Hand Test 11 failed: before-281 after-395

Deck Test 11 Test 170 failed: before-112 after--468616824

Discard Test 11 failed: before-496 after-553
Hand Test 12 failed: before-336 after-622

Deck Test 12 Test 84 failed: before-267 after--468616824

Discard Test 12 failed: before-327 after-143
Hand Test 13 failed: before-357 after-395

Deck Test 13 Test 229 failed: before-209 after--468616824

Discard Test 13 failed: before-313 after-332
Hand Test 14 failed: before-314 after-617

Deck Test 14 Test 82 failed: before-0 after--468616824

Discard Test 14 failed: before-45 after-177
Hand Test 15 failed: before-250 after-622

Deck Test 15 Test 364 failed: before-177 after--468616824

Discard Test 15 failed: before-43 after-229
Hand Test 16 failed: before-288 after-622

Deck Test 16 Test 276 failed: before-108 after--468616824

Discard Test 16 failed: before-178 after-345
Hand Test 17 failed: before-399 after-623

Deck Test 17 Test 151 failed: before-38 after--468616824

Discard Test 17 failed: before-254 after-366
Hand Test 18 failed: before-239 after-395

Deck Test 18 Test 176 failed: before-97 after--468616824

Discard Test 18 failed: before-368 after-446
Hand Test 19 failed: before-39 after-395

Deck Test 19 Test 86 failed: before-1 after--468616824

Discard Test 19 failed: before-94 after-178
Hand Test 20 failed: before-467 after-623

Deck Test 20 Test 434 failed: before-355 after--468616824

Discard Test 20 failed: before-378 after-456
Hand Test 21 failed: before-492 after-622

Deck Test 21 Test 402 failed: before-336 after--468616824

Discard Test 21 failed: before-317 after-382
Hand Test 22 failed: before-286 after-622

Deck Test 22 Test 301 failed: before-132 after--468616824

Discard Test 22 failed: before-280 after-448
Hand Test 23 failed: before-119 after-395

Deck Test 23 Test 189 failed: before-50 after--468616824

Discard Test 23 failed: before-444 after-582
Hand Test 24 failed: before-97 after-395

Deck Test 24 Test 31 failed: before-0 after--468616824

Discard Test 24 failed: before-117 after-151
Hand Test 25 failed: before-427 after-623

Deck Test 25 Test 175 failed: before-76 after--468616824

Discard Test 25 failed: before-209 after-307
Hand Test 26 failed: before-86 after-622

Deck Test 26 Test 497 failed: before-228 after--468616824

Discard Test 26 failed: before-353 after-621
Hand Test 27 failed: before-124 after-622

Deck Test 27 Test 183 failed: before-152 after--468616824

Discard Test 27 failed: before-219 after-249
Hand Test 28 failed: before-3 after-395

Deck Test 28 Test 232 failed: before-35 after--468616824

Discard Test 28 failed: before-329 after-525
Hand Test 29 failed: before-215 after-395

Deck Test 29 Test 368 failed: before-277 after--468616824

Discard Test 29 failed: before-208 after-298
Hand Test 30 failed: before-118 after-470

Deck Test 30 Test 296 failed: before-119 after--468616824

Discard Test 30 failed: before-223 after-399
Hand Test 31 failed: before-55 after-395

Deck Test 31 Test 451 failed: before-280 after--468616824

Discard Test 31 failed: before-421 after-591
Hand Test 32 failed: before-341 after-395

Deck Test 32 Test 264 failed: before-236 after--468616824

Discard Test 32 failed: before-228 after-255
Hand Test 33 failed: before-264 after-360

Deck Test 33 Test 0 failed: before-0 after--468616824

Discard Test 33 failed: before-34 after-63
Hand Test 34 failed: before-243 after-395

Deck Test 34 Test 487 failed: before-410 after--468616824

Discard Test 34 failed: before-356 after-432
Hand Test 35 failed: before-436 after-622

Deck Test 35 Test 365 failed: before-271 after--468616824

Discard Test 35 failed: before-359 after-452
Hand Test 36 failed: before-275 after-395

Deck Test 36 Test 437 failed: before-376 after--468616824

Discard Test 36 failed: before-228 after-288
Hand Test 37 failed: before-395 after-617

Deck Test 37 Test 121 failed: before-9 after--468616824

Discard Test 37 failed: before-358 after-469
Hand Test 38 failed: before-318 after-470

Deck Test 38 Test 235 failed: before-158 after--468616824

Discard Test 38 failed: before-293 after-369
Hand Test 39 failed: before-29 after-395

Deck Test 39 Test 11 failed: before-255 after--468616824

Discard Test 39 failed: before-428 after-183
Hand Test 40 failed: before-113 after-395

Deck Test 40 Test 443 failed: before-301 after--468616824

Discard Test 40 failed: before-263 after-404
Hand Test 41 failed: before-318 after-470

Deck Test 41 Test 340 failed: before-263 after--468616824

Discard Test 41 failed: before-404 after-480
Hand Test 42 failed: before-417 after-615

Deck Test 42 Test 369 failed: before-269 after--468616824

Discard Test 42 failed: before-417 after-516
Hand Test 43 failed: before-183 after-395

Deck Test 43 Test 243 failed: before-136 after--468616824

Discard Test 43 failed: before-470 after-576
Hand Test 44 failed: before-144 after-470

Deck Test 44 Test 272 failed: before-108 after--468616824

Discard Test 44 failed: before-225 after-388
Hand Test 45 failed: before-286 after-470

Deck Test 45 Test 139 failed: before-46 after--468616824

Discard Test 45 failed: before-454 after-546
Hand Test 46 failed: before-197 after-395

Deck Test 46 Test 42 failed: before-406 after--468616824

Discard Test 46 failed: before-464 after-99
Hand Test 47 failed: before-111 after-259

Deck Test 47 Test 304 failed: before-229 after--468616824

Discard Test 47 failed: before-348 after-422
Hand Test 48 failed: before-246 after-360

Deck Test 48 Test 299 failed: before-241 after--468616824

Discard Test 48 failed: before-343 after-400
Hand Test 49 failed: before-310 after-470

Deck Test 49 Test 422 failed: before-341 after--468616824

Discard Test 49 failed: before-311 after-391
Hand Test 50 failed: before-378 after-470

Deck Test 50 Test 161 failed: before-114 after--468616824

Discard Test 50 failed: before-230 after-276
Hand Test 51 failed: before-126 after-360

Deck Test 51 Test 236 failed: before-118 after--468616824

Discard Test 51 failed: before-444 after-561
Hand Test 52 failed: before-282 after-470

Deck Test 52 Test 208 failed: before-113 after--468616824

Discard Test 52 failed: before-416 after-510
Hand Test 53 failed: before-124 after-360

Deck Test 53 Test 137 failed: before-18 after--468616824

Discard Test 53 failed: before-62 after-180
Hand Test 54 failed: before-379 after-615

Deck Test 54 Test 452 failed: before-333 after--468616824

Discard Test 54 failed: before-399 after-517
Hand Test 55 failed: before-131 after-259

Deck Test 55 Test 71 failed: before-6 after--468616824

Discard Test 55 failed: before-473 after-537
Hand Test 56 failed: before-160 after-360

Deck Test 56 Test 433 failed: before-332 after--468616824

Discard Test 56 failed: before-394 after-494
Hand Test 57 failed: before-496 after-622

Deck Test 57 Test 481 failed: before-417 after--468616824

Discard Test 57 failed: before-399 after-462
Hand Test 58 failed: before-190 after-360

Deck Test 58 Test 313 failed: before-227 after--468616824

Discard Test 58 failed: before-168 after-253
Hand Test 59 failed: before-340 after-470

Deck Test 59 Test 466 failed: before-400 after--468616824

Discard Test 59 failed: before-84 after-149
Hand Test 60 failed: before-436 after-622

Deck Test 60 Test 376 failed: before-282 after--468616824

Discard Test 60 failed: before-42 after-135
Hand Test 61 failed: before-418 after-622

Deck Test 61 Test 256 failed: before-153 after--468616824

Discard Test 61 failed: before-179 after-281
Hand Test 62 failed: before-159 after-251

Deck Test 62 Test 348 failed: before-301 after--468616824

Discard Test 62 failed: before-172 after-218
Hand Test 63 failed: before-87 after-251

Deck Test 63 Test 210 failed: before-127 after--468616824

Discard Test 63 failed: before-342 after-424
Hand Test 64 failed: before-321 after-395

Deck Test 64 Test 213 failed: before-175 after--468616824

Discard Test 64 failed: before-372 after-409
Hand Test 65 failed: before-404 after-470

Deck Test 65 Test 99 failed: before-65 after--468616824

Discard Test 65 failed: before-221 after-254
Hand Test 66 failed: before-205 after-251

Deck Test 66 Test 440 failed: before-416 after--468616824

Discard Test 66 failed: before-167 after-190
Hand Test 67 failed: before-158 after-360

Deck Test 67 Test 150 failed: before-48 after--468616824

Discard Test 67 failed: before-484 after-585
Hand Test 68 failed: before-396 after-470

Deck Test 68 Test 422 failed: before-384 after--468616824

Discard Test 68 failed: before-269 after-306
Hand Test 69 failed: before-472 after-622

Deck Test 69 Test 84 failed: before-8 after--468616824

Discard Test 69 failed: before-292 after-367
Hand Test 70 failed: before-222 after-360

Deck Test 70 Test 125 failed: before-55 after--468616824

Discard Test 70 failed: before-385 after-454
Hand Test 71 failed: before-213 after-399

Deck Test 71 Test 42 failed: before-346 after--468616824

Discard Test 71 failed: before-398 after-93
Hand Test 72 failed: before-209 after-277

Deck Test 72 Test 24 failed: before-79 after--468616824

Discard Test 72 failed: before-90 after-34
Hand Test 73 failed: before-155 after-251

Deck Test 73 Test 336 failed: before-287 after--468616824

Discard Test 73 failed: before-232 after-280
Hand Test 74 failed: before-273 after-277

Deck Test 74 Test 379 failed: before-376 after--468616824

Discard Test 74 failed: before-269 after-271
Hand Test 75 failed: before-142 after-252

Deck Test 75 Test 255 failed: before-199 after--468616824

Discard Test 75 failed: before-360 after-415
Hand Test 76 failed: before-121 after-251

Deck Test 76 Test 493 failed: before-427 after--468616824

Discard Test 76 failed: before-205 after-270
Hand Test 77 failed: before-254 after-276

Deck Test 77 Test 113 failed: before-101 after--468616824

Discard Test 77 failed: before-461 after-472
Hand Test 78 failed: before-202 after-252

Deck Test 78 Test 444 failed: before-418 after--468616824

Discard Test 78 failed: before-202 after-227
Hand Test 79 failed: before-368 after-470

Deck Test 79 Test 21 failed: before-311 after--468616824

Discard Test 79 failed: before-342 after-51
Hand Test 80 failed: before-458 after-618

Deck Test 80 Test 372 failed: before-291 after--468616824

Discard Test 80 failed: before-408 after-488
Hand Test 81 failed: before-248 after-252

Deck Test 81 Test 308 failed: before-305 after--468616824

Discard Test 81 failed: before-253 after-255
Hand Test 82 failed: before-390 after-398

Deck Test 82 Test 133 failed: before-128 after--468616824

Discard Test 82 failed: before-148 after-152
Hand Test 83 failed: before-29 after-251

Deck Test 83 Test 246 failed: before-134 after--468616824

Discard Test 83 failed: before-368 after-479
Hand Test 84 failed: before-249 after-255

Deck Test 84 Test 288 failed: before-284 after--468616824

Discard Test 84 failed: before-297 after-300
Hand Test 85 failed: before-497 after-623

Deck Test 85 Test 33 failed: before-332 after--468616824

Discard Test 85 failed: before-363 after-63
Hand Test 86 failed: before-152 after-276

Deck Test 86 Test 186 failed: before-123 after--468616824

Discard Test 86 failed: before-125 after-187
Hand Test 87 failed: before-229 after-255

Deck Test 87 Test 188 failed: before-174 after--468616824

Discard Test 87 failed: before-157 after-170
Hand Test 88 failed: before-460 after-618

Deck Test 88 Test 414 failed: before-334 after--468616824

Discard Test 88 failed: before-421 after-500
Hand Test 89 failed: before-248 after-276

Deck Test 89 Test 27 failed: before-12 after--468616824

Discard Test 89 failed: before-50 after-64
Hand Test 90 failed: before-199 after-255

Deck Test 90 Test 294 failed: before-265 after--468616824

Discard Test 90 failed: before-197 after-225
Hand Test 91 failed: before-403 after-409

Deck Test 91 Test 2 failed: before-426 after--468616824

Discard Test 91 failed: before-428 after-3
Hand Test 92 failed: before-159 after-255

Deck Test 92 Test 147 failed: before-98 after--468616824

Discard Test 92 failed: before-38 after-86
Hand Test 93 failed: before-192 after-276

Deck Test 93 Test 134 failed: before-91 after--468616824

Discard Test 93 failed: before-339 after-381
Hand Test 94 failed: before-49 after-255

Deck Test 94 Test 4 failed: before-29 after--468616824

Discard Test 94 failed: before-129 after-103
Hand Test 95 failed: before-335 after-391

Deck Test 95 Test 429 failed: before-400 after--468616824

Discard Test 95 failed: before-343 after-371
Hand Test 96 failed: before-449 after-615

Deck Test 96 Test 238 failed: before-154 after--468616824

Discard Test 96 failed: before-471 after-554
Hand Test 97 failed: before-295 after-391

Deck Test 97 Test 488 failed: before-439 after--468616824

Discard Test 97 failed: before-292 after-340
Hand Test 98 failed: before-182 after-276

Deck Test 98 Test 329 failed: before-281 after--468616824

Discard Test 98 failed: before-390 after-437
Hand Test 99 failed: before-232 after-276

Deck Test 99 Test 69 failed: before-46 after--468616824

Discard Test 99 failed: before-326 after-348


Status: 300 failured and 0 passed tests
100 games run
File 'dominion.c'
Lines executed:25.00% of 560
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include "rngs.h"
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:
    27938:    9:int compare(const void* a, const void* b) {
    27938:   10:  if (*(int*)a > *(int*)b)
     5429:   11:    return 1;
    22509:   12:  if (*(int*)a < *(int*)b)
     1117:   13:    return -1;
    21392:   14:  return 0;
        -:   15:}
        -:   16:
    #####:   17:struct gameState* newGame() {
    #####:   18:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:  return g;
        -:   20:}
        -:   21:
    #####:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:		  int k8, int k9, int k10) {
    #####:   24:  int* k = malloc(10 * sizeof(int));
    #####:   25:  k[0] = k1;
    #####:   26:  k[1] = k2;
    #####:   27:  k[2] = k3;
    #####:   28:  k[3] = k4;
    #####:   29:  k[4] = k5;
    #####:   30:  k[5] = k6;
    #####:   31:  k[6] = k7;
    #####:   32:  k[7] = k8;
    #####:   33:  k[8] = k9;
    #####:   34:  k[9] = k10;
    #####:   35:  return k;
        -:   36:}
        -:   37:
      100:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:		   struct gameState *state) {
        -:   40:
        -:   41:  int i;
        -:   42:  int j;
        -:   43:  int it;			
        -:   44:  //set up random number generator
      100:   45:  SelectStream(1);
      100:   46:  PutSeed((long)randomSeed);
        -:   47:  
        -:   48:  //check number of players
      100:   49:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   50:    {
       51:   51:      return -1;
        -:   52:    }
        -:   53:
        -:   54:  //set number of players
       49:   55:  state->numPlayers = numPlayers;
        -:   56:
        -:   57:  //check selected kingdom cards are different
      539:   58:  for (i = 0; i < 10; i++)
        -:   59:    {
     5390:   60:      for (j = 0; j < 10; j++)
        -:   61:        {
     4900:   62:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   63:	    {
    #####:   64:	      return -1;
        -:   65:	    }
        -:   66:        }
        -:   67:    }
        -:   68:
        -:   69:
        -:   70:  //initialize supply
        -:   71:  ///////////////////////////////
        -:   72:
        -:   73:  //set number of Curse cards
       49:   74:  if (numPlayers == 2)
        -:   75:    {
       20:   76:      state->supplyCount[curse] = 10;
        -:   77:    }
       29:   78:  else if (numPlayers == 3)
        -:   79:    {
       29:   80:      state->supplyCount[curse] = 20;
        -:   81:    }
        -:   82:  else
        -:   83:    {
    #####:   84:      state->supplyCount[curse] = 30;
        -:   85:    }
        -:   86:
        -:   87:  //set number of Victory cards
       49:   88:  if (numPlayers == 2)
        -:   89:    {
       20:   90:      state->supplyCount[estate] = 8;
       20:   91:      state->supplyCount[duchy] = 8;
       20:   92:      state->supplyCount[province] = 8;
        -:   93:    }
        -:   94:  else
        -:   95:    {
       29:   96:      state->supplyCount[estate] = 12;
       29:   97:      state->supplyCount[duchy] = 12;
       29:   98:      state->supplyCount[province] = 12;
        -:   99:    }
        -:  100:
        -:  101:  //set number of Treasure cards
       49:  102:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       49:  103:  state->supplyCount[silver] = 40;
       49:  104:  state->supplyCount[gold] = 30;
        -:  105:
        -:  106:  //set number of Kingdom cards
     1029:  107:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  108:    {
     8085:  109:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  110:	{
     7595:  111:	  if (kingdomCards[j] == i)
        -:  112:	    {
        -:  113:	      //check if card is a 'Victory' Kingdom card
      490:  114:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  115:		{
       98:  116:		  if (numPlayers == 2){ 
       20:  117:		    state->supplyCount[i] = 8; 
        -:  118:		  }
       29:  119:		  else{ state->supplyCount[i] = 12; }
        -:  120:		}
        -:  121:	      else
        -:  122:		{
      441:  123:		  state->supplyCount[i] = 10;
        -:  124:		}
      490:  125:	      break;
        -:  126:	    }
        -:  127:	  else    //card is not in the set choosen for the game
        -:  128:	    {
     7105:  129:	      state->supplyCount[i] = -1;
        -:  130:	    }
        -:  131:	}
        -:  132:
        -:  133:    }
        -:  134:
        -:  135:  ////////////////////////
        -:  136:  //supply intilization complete
        -:  137:
        -:  138:  //set player decks
      176:  139:  for (i = 0; i < numPlayers; i++)
        -:  140:    {
      127:  141:      state->deckCount[i] = 0;
      508:  142:      for (j = 0; j < 3; j++)
        -:  143:	{
      381:  144:	  state->deck[i][j] = estate;
      381:  145:	  state->deckCount[i]++;
        -:  146:	}
     1016:  147:      for (j = 3; j < 10; j++)
        -:  148:	{
      889:  149:	  state->deck[i][j] = copper;
      889:  150:	  state->deckCount[i]++;		
        -:  151:	}
        -:  152:    }
        -:  153:
        -:  154:  //shuffle player decks
      176:  155:  for (i = 0; i < numPlayers; i++)
        -:  156:    {
      127:  157:      if ( shuffle(i, state) < 0 )
        -:  158:	{
    #####:  159:	  return -1;
        -:  160:	}
        -:  161:    }
        -:  162:
        -:  163:  //draw player hands
      176:  164:  for (i = 0; i < numPlayers; i++)
        -:  165:    {  
        -:  166:      //initialize hand size to zero
      127:  167:      state->handCount[i] = 0;
      127:  168:      state->discardCount[i] = 0;
        -:  169:      //draw 5 cards
        -:  170:      // for (j = 0; j < 5; j++)
        -:  171:      //	{
        -:  172:      //	  drawCard(i, state);
        -:  173:      //	}
        -:  174:    }
        -:  175:  
        -:  176:  //set embargo tokens to 0 for all supply piles
     1372:  177:  for (i = 0; i <= treasure_map; i++)
        -:  178:    {
     1323:  179:      state->embargoTokens[i] = 0;
        -:  180:    }
        -:  181:
        -:  182:  //initialize first player's turn
       49:  183:  state->outpostPlayed = 0;
       49:  184:  state->phase = 0;
       49:  185:  state->numActions = 1;
       49:  186:  state->numBuys = 1;
       49:  187:  state->playedCardCount = 0;
       49:  188:  state->whoseTurn = 0;
       49:  189:  state->handCount[state->whoseTurn] = 0;
        -:  190:  //int it; move to top
        -:  191:
        -:  192:  //Moved draw cards to here, only drawing at the start of a turn
      294:  193:  for (it = 0; it < 5; it++){
      245:  194:    drawCard(state->whoseTurn, state);
        -:  195:  }
        -:  196:
       49:  197:  updateCoins(state->whoseTurn, state, 0);
        -:  198:
       49:  199:  return 0;
        -:  200:}
        -:  201:
     8411:  202:int shuffle(int player, struct gameState *state) {
        -:  203: 
        -:  204:
        -:  205:  int newDeck[MAX_DECK];
     8411:  206:  int newDeckPos = 0;
        -:  207:  int card;
        -:  208:  int i;
        -:  209:
     8411:  210:  if (state->deckCount[player] < 1)
     8262:  211:    return -1;
      149:  212:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  213:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  214:
     6875:  215:  while (state->deckCount[player] > 0) {
     6577:  216:    card = floor(Random() * state->deckCount[player]);
     6577:  217:    newDeck[newDeckPos] = state->deck[player][card];
     6577:  218:    newDeckPos++;
   470566:  219:    for (i = card; i < state->deckCount[player]-1; i++) {
   463989:  220:      state->deck[player][i] = state->deck[player][i+1];
        -:  221:    }
     6577:  222:    state->deckCount[player]--;
        -:  223:  }
     6726:  224:  for (i = 0; i < newDeckPos; i++) {
     6577:  225:    state->deck[player][i] = newDeck[i];
     6577:  226:    state->deckCount[player]++;
        -:  227:  }
        -:  228:
      149:  229:  return 0;
        -:  230:}
        -:  231:
    #####:  232:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  233:{	
        -:  234:  int card;
    #####:  235:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  236:
        -:  237:  //check if it is the right phase
    #####:  238:  if (state->phase != 0)
        -:  239:    {
    #####:  240:      return -1;
        -:  241:    }
        -:  242:	
        -:  243:  //check if player has enough actions
    #####:  244:  if ( state->numActions < 1 )
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //get card played
    #####:  250:  card = handCard(handPos, state);
        -:  251:	
        -:  252:  //check if selected card is an action
    #####:  253:  if ( card < adventurer || card > treasure_map )
        -:  254:    {
    #####:  255:      return -1;
        -:  256:    }
        -:  257:	
        -:  258:  //play card
    #####:  259:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //reduce number of actions
    #####:  265:  state->numActions--;
        -:  266:
        -:  267:  //update coins (Treasure cards may be added with card draws)
    #####:  268:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  269:	
    #####:  270:  return 0;
        -:  271:}
        -:  272:
    #####:  273:int buyCard(int supplyPos, struct gameState *state) {
        -:  274:  int who;
        -:  275:  if (DEBUG){
        -:  276:    printf("Entering buyCard...\n");
        -:  277:  }
        -:  278:
        -:  279:  // I don't know what to do about the phase thing.
        -:  280:
    #####:  281:  who = state->whoseTurn;
        -:  282:
    #####:  283:  if (state->numBuys < 1){
        -:  284:    if (DEBUG)
        -:  285:      printf("You do not have any buys left\n");
    #####:  286:    return -1;
    #####:  287:  } else if (supplyCount(supplyPos, state) <1){
        -:  288:    if (DEBUG)
        -:  289:      printf("There are not any of that type of card left\n");
    #####:  290:    return -1;
    #####:  291:  } else if (state->coins < getCost(supplyPos)){
        -:  292:    if (DEBUG) 
        -:  293:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  294:    return -1;
        -:  295:  } else {
    #####:  296:    state->phase=1;
        -:  297:    //state->supplyCount[supplyPos]--;
    #####:  298:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  299:  
    #####:  300:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  301:    state->numBuys--;
        -:  302:    if (DEBUG)
        -:  303:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  304:  }
        -:  305:
        -:  306:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  307:  //state->discardCount[who]++;
        -:  308:    
    #####:  309:  return 0;
        -:  310:}
        -:  311:
    #####:  312:int numHandCards(struct gameState *state) {
    #####:  313:  return state->handCount[ whoseTurn(state) ];
        -:  314:}
        -:  315:
    #####:  316:int handCard(int handPos, struct gameState *state) {
    #####:  317:  int currentPlayer = whoseTurn(state);
    #####:  318:  return state->hand[currentPlayer][handPos];
        -:  319:}
        -:  320:
    #####:  321:int supplyCount(int card, struct gameState *state) {
    #####:  322:  return state->supplyCount[card];
        -:  323:}
        -:  324:
    #####:  325:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  326:  int i;
    #####:  327:  int count = 0;
        -:  328:
    #####:  329:  for (i = 0; i < state->deckCount[player]; i++)
        -:  330:    {
    #####:  331:      if (state->deck[player][i] == card) count++;
        -:  332:    }
        -:  333:
    #####:  334:  for (i = 0; i < state->handCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->hand[player][i] == card) count++;
        -:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->discardCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->discard[player][i] == card) count++;
        -:  342:    }
        -:  343:
    #####:  344:  return count;
        -:  345:}
        -:  346:
      100:  347:int whoseTurn(struct gameState *state) {
      100:  348:  return state->whoseTurn;
        -:  349:}
        -:  350:
    #####:  351:int endTurn(struct gameState *state) {
        -:  352:  int k;
        -:  353:  int i;
    #####:  354:  int currentPlayer = whoseTurn(state);
        -:  355:  
        -:  356:  //Discard hand
    #####:  357:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  358:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  359:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  360:  }
    #####:  361:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  362:    
        -:  363:  //Code for determining the player
    #####:  364:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  365:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  366:  }
        -:  367:  else{
    #####:  368:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  369:  }
        -:  370:
    #####:  371:  state->outpostPlayed = 0;
    #####:  372:  state->phase = 0;
    #####:  373:  state->numActions = 1;
    #####:  374:  state->coins = 0;
    #####:  375:  state->numBuys = 1;
    #####:  376:  state->playedCardCount = 0;
    #####:  377:  state->handCount[state->whoseTurn] = 0;
        -:  378:
        -:  379:  //int k; move to top
        -:  380:  //Next player draws hand
    #####:  381:  for (k = 0; k < 5; k++){
    #####:  382:    drawCard(state->whoseTurn, state);//Draw a card
        -:  383:  }
        -:  384:
        -:  385:  //Update money
    #####:  386:  updateCoins(state->whoseTurn, state , 0);
        -:  387:
    #####:  388:  return 0;
        -:  389:}
        -:  390:
    #####:  391:int isGameOver(struct gameState *state) {
        -:  392:  int i;
        -:  393:  int j;
        -:  394:	
        -:  395:  //if stack of Province cards is empty, the game ends
    #####:  396:  if (state->supplyCount[province] == 0)
        -:  397:    {
    #####:  398:      return 1;
        -:  399:    }
        -:  400:
        -:  401:  //if three supply pile are at 0, the game ends
    #####:  402:  j = 0;
    #####:  403:  for (i = 0; i < 25; i++)
        -:  404:    {
    #####:  405:      if (state->supplyCount[i] == 0)
        -:  406:	{
    #####:  407:	  j++;
        -:  408:	}
        -:  409:    }
    #####:  410:  if ( j >= 3)
        -:  411:    {
    #####:  412:      return 1;
        -:  413:    }
        -:  414:
    #####:  415:  return 0;
        -:  416:}
        -:  417:
    #####:  418:int scoreFor (int player, struct gameState *state) {
        -:  419:
        -:  420:  int i;
    #####:  421:  int score = 0;
        -:  422:  //score from hand
    #####:  423:  for (i = 0; i < state->handCount[player]; i++)
        -:  424:    {
    #####:  425:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  426:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  427:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  428:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  429:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  430:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  431:    }
        -:  432:
        -:  433:  //score from discard
    #####:  434:  for (i = 0; i < state->discardCount[player]; i++)
        -:  435:    {
    #####:  436:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  437:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  438:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  439:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  440:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  441:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  442:    }
        -:  443:
        -:  444:  //score from deck
    #####:  445:  for (i = 0; i < state->discardCount[player]; i++)
        -:  446:    {
    #####:  447:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  448:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  449:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  450:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  451:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  452:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  453:    }
        -:  454:
    #####:  455:  return score;
        -:  456:}
        -:  457:
    #####:  458:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  459:  int i;	
        -:  460:  int j;
        -:  461:  int highScore;
        -:  462:  int currentPlayer;
        -:  463:
        -:  464:  //get score for each player
    #####:  465:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  466:    {
        -:  467:      //set unused player scores to -9999
    #####:  468:      if (i >= state->numPlayers)
        -:  469:	{
    #####:  470:	  players[i] = -9999;
        -:  471:	}
        -:  472:      else
        -:  473:	{
    #####:  474:	  players[i] = scoreFor (i, state);
        -:  475:	}
        -:  476:    }
        -:  477:
        -:  478:  //find highest score
    #####:  479:  j = 0;
    #####:  480:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  481:    {
    #####:  482:      if (players[i] > players[j])
        -:  483:	{
    #####:  484:	  j = i;
        -:  485:	}
        -:  486:    }
    #####:  487:  highScore = players[j];
        -:  488:
        -:  489:  //add 1 to players who had less turns
    #####:  490:  currentPlayer = whoseTurn(state);
    #####:  491:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  492:    {
    #####:  493:      if ( players[i] == highScore && i > currentPlayer )
        -:  494:	{
    #####:  495:	  players[i]++;
        -:  496:	}
        -:  497:    }
        -:  498:
        -:  499:  //find new highest score
    #####:  500:  j = 0;
    #####:  501:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  502:    {
    #####:  503:      if ( players[i] > players[j] )
        -:  504:	{
    #####:  505:	  j = i;
        -:  506:	}
        -:  507:    }
    #####:  508:  highScore = players[j];
        -:  509:
        -:  510:  //set winners in array to 1 and rest to 0
    #####:  511:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  512:    {
    #####:  513:      if ( players[i] == highScore )
        -:  514:	{
    #####:  515:	  players[i] = 1;
        -:  516:	}
        -:  517:      else
        -:  518:	{
    #####:  519:	  players[i] = 0;
        -:  520:	}
        -:  521:    }
        -:  522:
    #####:  523:  return 0;
        -:  524:}
        -:  525:
    15949:  526:int drawCard(int player, struct gameState *state)
        -:  527:{	int count;
        -:  528:  int deckCounter;
    15949:  529:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  530:    
        -:  531:    //Step 1 Shuffle the discard pile back into a deck
        -:  532:    int i;
        -:  533:    //Move discard to deck
     9449:  534:    for (i = 0; i < state->discardCount[player];i++){
     5307:  535:      state->deck[player][i] = state->discard[player][i];
     5307:  536:      state->discard[player][i] = -1;
        -:  537:    }
        -:  538:
     4142:  539:    state->deckCount[player] = state->discardCount[player];
     4142:  540:    state->discardCount[player] = 0;//Reset discard
        -:  541:
        -:  542:    //Shufffle the deck
     4142:  543:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  544:   
        -:  545:    if (DEBUG){//Debug statements
        -:  546:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  547:    }
        -:  548:    
     4142:  549:    state->discardCount[player] = 0;
        -:  550:
        -:  551:    //Step 2 Draw Card
     4142:  552:    count = state->handCount[player];//Get current player's hand count
        -:  553:    
        -:  554:    if (DEBUG){//Debug statements
        -:  555:      printf("Current hand count: %d\n", count);
        -:  556:    }
        -:  557:    
     4142:  558:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  559:
     4142:  560:    if (deckCounter == 0)
     4120:  561:      return -1;
        -:  562:
       22:  563:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       22:  564:    state->deckCount[player]--;
       22:  565:    state->handCount[player]++;//Increment hand count
        -:  566:  }
        -:  567:
        -:  568:  else{
    11807:  569:    int count = state->handCount[player];//Get current hand count for player
        -:  570:    int deckCounter;
        -:  571:    if (DEBUG){//Debug statements
        -:  572:      printf("Current hand count: %d\n", count);
        -:  573:    }
        -:  574:
    11807:  575:    deckCounter = state->deckCount[player];//Create holder for the deck count
    11807:  576:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    11807:  577:    state->deckCount[player]--;
    11807:  578:    state->handCount[player]++;//Increment hand count
        -:  579:  }
        -:  580:
    11829:  581:  return 0;
        -:  582:}
        -:  583:
    #####:  584:int getCost(int cardNumber)
        -:  585:{
    #####:  586:  switch( cardNumber ) 
        -:  587:    {
        -:  588:    case curse:
    #####:  589:      return 0;
        -:  590:    case estate:
    #####:  591:      return 2;
        -:  592:    case duchy:
    #####:  593:      return 5;
        -:  594:    case province:
    #####:  595:      return 8;
        -:  596:    case copper:
    #####:  597:      return 0;
        -:  598:    case silver:
    #####:  599:      return 3;
        -:  600:    case gold:
    #####:  601:      return 6;
        -:  602:    case adventurer:
    #####:  603:      return 6;
        -:  604:    case council_room:
    #####:  605:      return 5;
        -:  606:    case feast:
    #####:  607:      return 4;
        -:  608:    case gardens:
    #####:  609:      return 4;
        -:  610:    case mine:
    #####:  611:      return 5;
        -:  612:    case remodel:
    #####:  613:      return 4;
        -:  614:    case smithy:
    #####:  615:      return 4;
        -:  616:    case village:
    #####:  617:      return 3;
        -:  618:    case baron:
    #####:  619:      return 4;
        -:  620:    case great_hall:
    #####:  621:      return 3;
        -:  622:    case minion:
    #####:  623:      return 5;
        -:  624:    case steward:
    #####:  625:      return 3;
        -:  626:    case tribute:
    #####:  627:      return 5;
        -:  628:    case ambassador:
    #####:  629:      return 3;
        -:  630:    case cutpurse:
    #####:  631:      return 4;
        -:  632:    case embargo: 
    #####:  633:      return 2;
        -:  634:    case outpost:
    #####:  635:      return 5;
        -:  636:    case salvager:
    #####:  637:      return 4;
        -:  638:    case sea_hag:
    #####:  639:      return 4;
        -:  640:    case treasure_map:
    #####:  641:      return 4;
        -:  642:    }
        -:  643:	
    #####:  644:  return -1;
        -:  645:}
        -:  646:
        -:  647:
    #####:  648:int Smithy(int currentPlayer, struct gameState *state, int handPos){
        -:  649:     //+3 Cards
    #####:  650:  for (int i = 0; i <= 3; i++)
        -:  651:  {
    #####:  652:    drawCard(currentPlayer, state);
        -:  653:  }
        -:  654:      
        -:  655:  //discard card from hand
    #####:  656:  discardCard(currentPlayer, handPos, state, 0);
    #####:  657:  return 0;
        -:  658:}
        -:  659:
        -:  660: 
      100:  661:int Adventurer(struct gameState *state, int currentPlayer){
      100:  662:     int z=1;
        -:  663:     int temphand[MAX_HAND];
      100:  664:     int drawntreasure=0;
    15904:  665:while(drawntreasure<2){
    15704:  666:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
     4142:  667:       shuffle(currentPlayer, state);
        -:  668:    }
    15704:  669:    drawCard(currentPlayer, state);
    15704:  670:    int cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]+1];//top card of hand is most recently drawn card.
    15704:  671:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
      205:  672:       drawntreasure++;
        -:  673:    else{
    15499:  674:       temphand[z]=cardDrawn;
    15499:  675:       state->handCount[currentPlayer]++; //this should just remove the top card (the most recently drawn one).
    15499:  676:       z++;
        -:  677:    }
        -:  678: }
    10264:  679:  while(z-1>=0){
    10064:  680:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    10064:  681:    z=z-1;
        -:  682:  }
      100:  683:  return 0;
        -:  684: }
        -:  685:
        -:  686:
    #####:  687:int Village(int currentPlayer, struct gameState *state, int handPos){
        -:  688:   //+1 Card
    #####:  689:      drawCard(currentPlayer, state);
        -:  690:      
        -:  691:      //+2 Actions
    #####:  692:      state->numActions = state->numActions + 2;
        -:  693:      
        -:  694:      //discard played card from hand
    #####:  695:      discardCard(handPos, currentPlayer, state, 1);
    #####:  696:      return 0;
        -:  697:}
        -:  698:
        -:  699:
    #####:  700:int Council_room(int currentPlayer, struct gameState *state, int handPos){
        -:  701:       //+4 Cards
        -:  702:  int i;
    #####:  703:  for (i = 0; i < 5; i++)
        -:  704:  {
    #####:  705:    drawCard(currentPlayer, state);
        -:  706:  }
        -:  707:      
        -:  708:      //+1 Buy
    #####:  709:      state->numBuys++;
        -:  710:      
        -:  711:      //Each other player draws a card
    #####:  712:  for (i = 0; i < state->numPlayers; i++)
        -:  713:  {
    #####:  714:    if ( i == currentPlayer )
        -:  715:      {
    #####:  716:        drawCard(i, state);
        -:  717:      }
        -:  718:  }
        -:  719:      
        -:  720:      //put played card in played card pile
    #####:  721:      discardCard(handPos, currentPlayer, state, 0);
        -:  722:      
    #####:  723:      return 0;
        -:  724:}
        -:  725:
    #####:  726:int Feast(int currentPlayer, struct gameState *state, int choice1){
        -:  727:        //gain card with cost up to 5
        -:  728:      //Backup hand
        -:  729:  int i;
        -:  730:  int temphand[MAX_HAND];// moved above the if statement
        -:  731:  int x;
        -:  732:
    #####:  733:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  734:  temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  735:  state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  736:      }
        -:  737:      //Backup hand
        -:  738:
        -:  739:      //Update Coins for Buy
    #####:  740:      updateCoins(currentPlayer, state, 5);
    #####:  741:      x = 1;//Condition to loop on
    #####:  742:      while( x == 1) {//Buy one card
    #####:  743:  if (supplyCount(choice1, state) <= 0){
        -:  744:    if (DEBUG)
        -:  745:      printf("None of that card left, sorry!\n");
        -:  746:
        -:  747:    if (DEBUG){
        -:  748:      printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  749:    }
        -:  750:  }
    #####:  751:  else if (state->coins < getCost(choice1)){
    #####:  752:    printf("That card is too expensive!\n");
        -:  753:
        -:  754:    if (DEBUG){
        -:  755:      printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  756:    }
        -:  757:  }
        -:  758:  else{
        -:  759:
        -:  760:    if (DEBUG){
        -:  761:      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  762:    }
        -:  763:
    #####:  764:    gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  765:    x = 0;//No more buying cards
        -:  766:
        -:  767:    if (DEBUG){
        -:  768:      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  769:    }
        -:  770:
        -:  771:  }
        -:  772:      }     
        -:  773:
        -:  774:      //Reset Hand
    #####:  775:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  776:  state->hand[currentPlayer][i] = temphand[i];
    #####:  777:  temphand[i] = -1;
        -:  778:      }
        -:  779:      //Reset Hand
        -:  780:            
    #####:  781:      return 0;
        -:  782:}
        -:  783:
        -:  784:
        -:  785:
        -:  786:
        -:  787:
        -:  788:
        -:  789:
        -:  790:
        -:  791:
        -:  792:
        -:  793:
      100:  794:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  795:{
        -:  796:  int i;
        -:  797:  int j;
        -:  798:  int k;
        -:  799:  int x;
        -:  800:  int index;
      100:  801:  int currentPlayer = whoseTurn(state);
      100:  802:  int nextPlayer = currentPlayer + 1;
      100:  803:  int tributeRevealedCards[2] = {-1, -1};
        -:  804:  int temphand[MAX_HAND];// moved above the if statement
      100:  805:  int drawntreasure=0;
        -:  806:  int cardDrawn;
      100:  807:  int z = 0;// this is the counter for the temp hand
      100:  808:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  809:    nextPlayer = 0;
        -:  810:  }
        -:  811:  
        -:  812:	
        -:  813:  //uses switch to select card and perform actions
      100:  814:  switch( card ) 
        -:  815:    {
        -:  816:    case adventurer:
      100:  817:      return Adventurer(state, currentPlayer);
        -:  818: //      while(drawntreasure<2){
        -:  819:	// if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  820:	//   shuffle(currentPlayer, state);
        -:  821:	// }
        -:  822:	// drawCard(currentPlayer, state);
        -:  823:	// cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  824:	// if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  825:	//   drawntreasure++;
        -:  826:	// else{
        -:  827:	//   temphand[z]=cardDrawn;
        -:  828:	//   state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  829:	//   z++;
        -:  830:	// }
        -:  831: //      }
        -:  832: //      while(z-1>=0){
        -:  833:	// state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  834:	// z=z-1;
        -:  835: //      }
        -:  836: //      return 0;
        -:  837:			
        -:  838:    case council_room:
    #####:  839:       return Council_room(currentPlayer, state, handPos);
        -:  840: //      //+4 Cards
        -:  841: //      for (i = 0; i < 4; i++)
        -:  842:	// {
        -:  843:	//   drawCard(currentPlayer, state);
        -:  844:	// }
        -:  845:			
        -:  846: //      //+1 Buy
        -:  847: //      state->numBuys++;
        -:  848:			
        -:  849: //      //Each other player draws a card
        -:  850: //      for (i = 0; i < state->numPlayers; i++)
        -:  851:	// {
        -:  852:	//   if ( i != currentPlayer )
        -:  853:	//     {
        -:  854:	//       drawCard(i, state);
        -:  855:	//     }
        -:  856:	// }
        -:  857:			
        -:  858: //      //put played card in played card pile
        -:  859: //      discardCard(handPos, currentPlayer, state, 0);
        -:  860:			
        -:  861: //      return 0;
        -:  862:			
        -:  863:    case feast:
    #####:  864:       return Feast(currentPlayer, state, choice1);
        -:  865: //      //gain card with cost up to 5
        -:  866: //      //Backup hand
        -:  867: //      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -:  868:	// temphand[i] = state->hand[currentPlayer][i];//Backup card
        -:  869:	// state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  870: //      }
        -:  871: //      //Backup hand
        -:  872:
        -:  873: //      //Update Coins for Buy
        -:  874: //      updateCoins(currentPlayer, state, 5);
        -:  875: //      x = 1;//Condition to loop on
        -:  876: //      while( x == 1) {//Buy one card
        -:  877:	// if (supplyCount(choice1, state) <= 0){
        -:  878:	//   if (DEBUG)
        -:  879:	//     printf("None of that card left, sorry!\n");
        -:  880:
        -:  881:	//   if (DEBUG){
        -:  882:	//     printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  883:	//   }
        -:  884:	// }
        -:  885:	// else if (state->coins < getCost(choice1)){
        -:  886:	//   printf("That card is too expensive!\n");
        -:  887:
        -:  888:	//   if (DEBUG){
        -:  889:	//     printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  890:	//   }
        -:  891:	// }
        -:  892:	// else{
        -:  893:
        -:  894:	//   if (DEBUG){
        -:  895:	//     printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  896:	//   }
        -:  897:
        -:  898:	//   gainCard(choice1, state, 0, currentPlayer);//Gain the card
        -:  899:	//   x = 0;//No more buying cards
        -:  900:
        -:  901:	//   if (DEBUG){
        -:  902:	//     printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  903:	//   }
        -:  904:
        -:  905:	// }
        -:  906: //      }     
        -:  907:
        -:  908: //      //Reset Hand
        -:  909: //      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -:  910:	// state->hand[currentPlayer][i] = temphand[i];
        -:  911:	// temphand[i] = -1;
        -:  912: //      }
        -:  913: //      //Reset Hand
        -:  914:      			
        -:  915: //      return 0;
        -:  916:			
        -:  917:    case gardens:
    #####:  918:      return -1;
        -:  919:			
        -:  920:    case mine:
    #####:  921:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  922:
    #####:  923:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  924:	{
    #####:  925:	  return -1;
        -:  926:	}
        -:  927:		
    #####:  928:      if (choice2 > treasure_map || choice2 < curse)
        -:  929:	{
    #####:  930:	  return -1;
        -:  931:	}
        -:  932:
    #####:  933:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  934:	{
    #####:  935:	  return -1;
        -:  936:	}
        -:  937:
    #####:  938:      gainCard(choice2, state, 2, currentPlayer);
        -:  939:
        -:  940:      //discard card from hand
    #####:  941:      discardCard(handPos, currentPlayer, state, 0);
        -:  942:
        -:  943:      //discard trashed card
    #####:  944:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  945:	{
    #####:  946:	  if (state->hand[currentPlayer][i] == j)
        -:  947:	    {
    #####:  948:	      discardCard(i, currentPlayer, state, 0);			
    #####:  949:	      break;
        -:  950:	    }
        -:  951:	}
        -:  952:			
    #####:  953:      return 0;
        -:  954:			
        -:  955:    case remodel:
    #####:  956:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  957:
    #####:  958:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  959:	{
    #####:  960:	  return -1;
        -:  961:	}
        -:  962:
    #####:  963:      gainCard(choice2, state, 0, currentPlayer);
        -:  964:
        -:  965:      //discard card from hand
    #####:  966:      discardCard(handPos, currentPlayer, state, 0);
        -:  967:
        -:  968:      //discard trashed card
    #####:  969:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  970:	{
    #####:  971:	  if (state->hand[currentPlayer][i] == j)
        -:  972:	    {
    #####:  973:	      discardCard(i, currentPlayer, state, 0);			
    #####:  974:	      break;
        -:  975:	    }
        -:  976:	}
        -:  977:
        -:  978:
    #####:  979:      return 0;
        -:  980:		
        -:  981:    case smithy:
    #####:  982:      return Smithy(currentPlayer, state, handPos);
        -:  983: //      //+3 Cards
        -:  984: //      for (i = 0; i < 3; i++)
        -:  985:	// {
        -:  986:	//   drawCard(currentPlayer, state);
        -:  987:	// }
        -:  988:			
        -:  989: //      //discard card from hand
        -:  990: //      discardCard(handPos, currentPlayer, state, 0);
        -:  991: //      return 0;
        -:  992:		
        -:  993:    case village:
    #####:  994:      return Village(handPos, state, currentPlayer);
        -:  995:      // //+1 Card
        -:  996:      // drawCard(currentPlayer, state);
        -:  997:			
        -:  998:      // //+2 Actions
        -:  999:      // state->numActions = state->numActions + 2;
        -: 1000:			
        -: 1001:      // //discard played card from hand
        -: 1002:      // discardCard(handPos, currentPlayer, state, 0);
        -: 1003:      // return 0;
        -: 1004:		
        -: 1005:    case baron:
    #####: 1006:      state->numBuys++;//Increase buys by 1!
    #####: 1007:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1008:	int p = 0;//Iterator for hand!
    #####: 1009:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1010:	while(card_not_discarded){
    #####: 1011:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1012:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1013:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1014:	    state->discardCount[currentPlayer]++;
    #####: 1015:	    for (;p < state->handCount[currentPlayer]; p++){
    #####: 1016:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1017:	    }
    #####: 1018:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1019:	    state->handCount[currentPlayer]--;
    #####: 1020:	    card_not_discarded = 0;//Exit the loop
        -: 1021:	  }
    #####: 1022:	  else if (p > state->handCount[currentPlayer]){
        -: 1023:	    if(DEBUG) {
        -: 1024:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1025:	      printf("Must gain an estate if there are any\n");
        -: 1026:	    }
    #####: 1027:	    if (supplyCount(estate, state) > 0){
    #####: 1028:	      gainCard(estate, state, 0, currentPlayer);
    #####: 1029:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1030:	      if (supplyCount(estate, state) == 0){
    #####: 1031:		isGameOver(state);
        -: 1032:	      }
        -: 1033:	    }
    #####: 1034:	    card_not_discarded = 0;//Exit the loop
        -: 1035:	  }
        -: 1036:			    
        -: 1037:	  else{
    #####: 1038:	    p++;//Next card
        -: 1039:	  }
        -: 1040:	}
        -: 1041:      }
        -: 1042:			    
        -: 1043:      else{
    #####: 1044:	if (supplyCount(estate, state) > 0){
    #####: 1045:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1046:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1047:	  if (supplyCount(estate, state) == 0){
    #####: 1048:	    isGameOver(state);
        -: 1049:	  }
        -: 1050:	}
        -: 1051:      }
        -: 1052:	    
        -: 1053:      
    #####: 1054:      return 0;
        -: 1055:		
        -: 1056:    case great_hall:
        -: 1057:      //+1 Card
    #####: 1058:      drawCard(currentPlayer, state);
        -: 1059:			
        -: 1060:      //+1 Actions
    #####: 1061:      state->numActions++;
        -: 1062:			
        -: 1063:      //discard card from hand
    #####: 1064:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1065:      return 0;
        -: 1066:		
        -: 1067:    case minion:
        -: 1068:      //+1 action
    #####: 1069:      state->numActions++;
        -: 1070:			
        -: 1071:      //discard card from hand
    #####: 1072:      discardCard(handPos, currentPlayer, state, 0);
        -: 1073:			
    #####: 1074:      if (choice1)		//+2 coins
        -: 1075:	{
    #####: 1076:	  state->coins = state->coins + 2;
        -: 1077:	}
        -: 1078:			
    #####: 1079:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1080:	{
        -: 1081:	  //discard hand
    #####: 1082:	  while(numHandCards(state) > 0)
        -: 1083:	    {
    #####: 1084:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1085:	    }
        -: 1086:				
        -: 1087:	  //draw 4
    #####: 1088:	  for (i = 0; i < 4; i++)
        -: 1089:	    {
    #####: 1090:	      drawCard(currentPlayer, state);
        -: 1091:	    }
        -: 1092:				
        -: 1093:	  //other players discard hand and redraw if hand size > 4
    #####: 1094:	  for (i = 0; i < state->numPlayers; i++)
        -: 1095:	    {
    #####: 1096:	      if (i != currentPlayer)
        -: 1097:		{
    #####: 1098:		  if ( state->handCount[i] > 4 )
        -: 1099:		    {
        -: 1100:		      //discard hand
    #####: 1101:		      while( state->handCount[i] > 0 )
        -: 1102:			{
    #####: 1103:			  discardCard(handPos, i, state, 0);
        -: 1104:			}
        -: 1105:							
        -: 1106:		      //draw 4
    #####: 1107:		      for (j = 0; j < 4; j++)
        -: 1108:			{
    #####: 1109:			  drawCard(i, state);
        -: 1110:			}
        -: 1111:		    }
        -: 1112:		}
        -: 1113:	    }
        -: 1114:				
        -: 1115:	}
    #####: 1116:      return 0;
        -: 1117:		
        -: 1118:    case steward:
    #####: 1119:      if (choice1 == 1)
        -: 1120:	{
        -: 1121:	  //+2 cards
    #####: 1122:	  drawCard(currentPlayer, state);
    #####: 1123:	  drawCard(currentPlayer, state);
        -: 1124:	}
    #####: 1125:      else if (choice1 == 2)
        -: 1126:	{
        -: 1127:	  //+2 coins
    #####: 1128:	  state->coins = state->coins + 2;
        -: 1129:	}
        -: 1130:      else
        -: 1131:	{
        -: 1132:	  //trash 2 cards in hand
    #####: 1133:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1134:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1135:	}
        -: 1136:			
        -: 1137:      //discard card from hand
    #####: 1138:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1139:      return 0;
        -: 1140:		
        -: 1141:    case tribute:
    #####: 1142:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1143:	if (state->deckCount[nextPlayer] > 0){
    #####: 1144:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1145:	  state->deckCount[nextPlayer]--;
        -: 1146:	}
    #####: 1147:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1148:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1149:	  state->discardCount[nextPlayer]--;
        -: 1150:	}
        -: 1151:	else{
        -: 1152:	  //No Card to Reveal
        -: 1153:	  if (DEBUG){
        -: 1154:	    printf("No cards to reveal\n");
        -: 1155:	  }
        -: 1156:	}
        -: 1157:      }
        -: 1158:	    
        -: 1159:      else{
    #####: 1160:	if (state->deckCount[nextPlayer] == 0){
    #####: 1161:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1162:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1163:	    state->deckCount[nextPlayer]++;
    #####: 1164:	    state->discard[nextPlayer][i] = -1;
    #####: 1165:	    state->discardCount[nextPlayer]--;
        -: 1166:	  }
        -: 1167:			    
    #####: 1168:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1169:	} 
    #####: 1170:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1171:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1172:	state->deckCount[nextPlayer]--;
    #####: 1173:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1174:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1175:	state->deckCount[nextPlayer]--;
        -: 1176:      }    
        -: 1177:		       
    #####: 1178:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1179:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1180:	state->playedCardCount++;
    #####: 1181:	tributeRevealedCards[1] = -1;
        -: 1182:      }
        -: 1183:
    #####: 1184:      for (i = 0; i <= 2; i ++){
    #####: 1185:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1186:	  state->coins += 2;
        -: 1187:	}
        -: 1188:		    
    #####: 1189:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1190:	  drawCard(currentPlayer, state);
    #####: 1191:	  drawCard(currentPlayer, state);
        -: 1192:	}
        -: 1193:	else{//Action Card
    #####: 1194:	  state->numActions = state->numActions + 2;
        -: 1195:	}
        -: 1196:      }
        -: 1197:	    
    #####: 1198:      return 0;
        -: 1199:		
        -: 1200:    case ambassador:
    #####: 1201:      j = 0;		//used to check if player has enough cards to discard
        -: 1202:
    #####: 1203:      if (choice2 > 2 || choice2 < 0)
        -: 1204:	{
    #####: 1205:	  return -1;				
        -: 1206:	}
        -: 1207:
    #####: 1208:      if (choice1 == handPos)
        -: 1209:	{
    #####: 1210:	  return -1;
        -: 1211:	}
        -: 1212:
    #####: 1213:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1214:	{
    #####: 1215:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1216:	    {
    #####: 1217:	      j++;
        -: 1218:	    }
        -: 1219:	}
    #####: 1220:      if (j < choice2)
        -: 1221:	{
    #####: 1222:	  return -1;				
        -: 1223:	}
        -: 1224:
        -: 1225:      if (DEBUG) 
        -: 1226:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1227:
        -: 1228:      //increase supply count for choosen card by amount being discarded
    #####: 1229:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1230:			
        -: 1231:      //each other player gains a copy of revealed card
    #####: 1232:      for (i = 0; i < state->numPlayers; i++)
        -: 1233:	{
    #####: 1234:	  if (i != currentPlayer)
        -: 1235:	    {
    #####: 1236:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1237:	    }
        -: 1238:	}
        -: 1239:
        -: 1240:      //discard played card from hand
    #####: 1241:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1242:
        -: 1243:      //trash copies of cards returned to supply
    #####: 1244:      for (j = 0; j < choice2; j++)
        -: 1245:	{
    #####: 1246:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1247:	    {
    #####: 1248:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1249:		{
    #####: 1250:		  discardCard(i, currentPlayer, state, 1);
    #####: 1251:		  break;
        -: 1252:		}
        -: 1253:	    }
        -: 1254:	}			
        -: 1255:
    #####: 1256:      return 0;
        -: 1257:		
        -: 1258:    case cutpurse:
        -: 1259:
    #####: 1260:      updateCoins(currentPlayer, state, 2);
    #####: 1261:      for (i = 0; i < state->numPlayers; i++)
        -: 1262:	{
    #####: 1263:	  if (i != currentPlayer)
        -: 1264:	    {
    #####: 1265:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1266:		{
    #####: 1267:		  if (state->hand[i][j] == copper)
        -: 1268:		    {
    #####: 1269:		      discardCard(j, i, state, 0);
    #####: 1270:		      break;
        -: 1271:		    }
    #####: 1272:		  if (j == state->handCount[i])
        -: 1273:		    {
    #####: 1274:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1275:			{
        -: 1276:			  if (DEBUG)
        -: 1277:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1278:			}	
    #####: 1279:		      break;
        -: 1280:		    }		
        -: 1281:		}
        -: 1282:					
        -: 1283:	    }
        -: 1284:				
        -: 1285:	}				
        -: 1286:
        -: 1287:      //discard played card from hand
    #####: 1288:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1289:
    #####: 1290:      return 0;
        -: 1291:
        -: 1292:		
        -: 1293:    case embargo: 
        -: 1294:      //+2 Coins
    #####: 1295:      state->coins = state->coins + 2;
        -: 1296:			
        -: 1297:      //see if selected pile is in play
    #####: 1298:      if ( state->supplyCount[choice1] == -1 )
        -: 1299:	{
    #####: 1300:	  return -1;
        -: 1301:	}
        -: 1302:			
        -: 1303:      //add embargo token to selected supply pile
    #####: 1304:      state->embargoTokens[choice1]++;
        -: 1305:			
        -: 1306:      //trash card
    #####: 1307:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1308:      return 0;
        -: 1309:		
        -: 1310:    case outpost:
        -: 1311:      //set outpost flag
    #####: 1312:      state->outpostPlayed++;
        -: 1313:			
        -: 1314:      //discard card
    #####: 1315:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1316:      return 0;
        -: 1317:		
        -: 1318:    case salvager:
        -: 1319:      //+1 buy
    #####: 1320:      state->numBuys++;
        -: 1321:			
    #####: 1322:      if (choice1)
        -: 1323:	{
        -: 1324:	  //gain coins equal to trashed card
    #####: 1325:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1326:	  //trash card
    #####: 1327:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1328:	}
        -: 1329:			
        -: 1330:      //discard card
    #####: 1331:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1332:      return 0;
        -: 1333:		
        -: 1334:    case sea_hag:
    #####: 1335:      for (i = 0; i < state->numPlayers; i++){
    #####: 1336:	if (i != currentPlayer){
    #####: 1337:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1338:	  state->discardCount[i]++;
    #####: 1339:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1340:	}
        -: 1341:      }
    #####: 1342:      return 0;
        -: 1343:		
        -: 1344:    case treasure_map:
        -: 1345:      //search hand for another treasure_map
    #####: 1346:      index = -1;
    #####: 1347:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1348:	{
    #####: 1349:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1350:	    {
    #####: 1351:	      index = i;
    #####: 1352:	      break;
        -: 1353:	    }
        -: 1354:	}
    #####: 1355:      if (index > -1)
        -: 1356:	{
        -: 1357:	  //trash both treasure cards
    #####: 1358:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1359:	  discardCard(index, currentPlayer, state, 1);
        -: 1360:
        -: 1361:	  //gain 4 Gold cards
    #####: 1362:	  for (i = 0; i < 4; i++)
        -: 1363:	    {
    #####: 1364:	      gainCard(gold, state, 1, currentPlayer);
        -: 1365:	    }
        -: 1366:				
        -: 1367:	  //return success
    #####: 1368:	  return 1;
        -: 1369:	}
        -: 1370:			
        -: 1371:      //no second treasure_map found in hand
    #####: 1372:      return -1;
        -: 1373:    }
        -: 1374:	
    #####: 1375:  return -1;
        -: 1376:}
        -: 1377:
    #####: 1378:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1379:{
        -: 1380:	
        -: 1381:  //if card is not trashed, added to Played pile 
    #####: 1382:  if (trashFlag < 1)
        -: 1383:    {
        -: 1384:      //add card to played pile
    #####: 1385:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1386:      state->playedCardCount++;
        -: 1387:    }
        -: 1388:	
        -: 1389:  //set played card to -1
    #####: 1390:  state->hand[currentPlayer][handPos] = -1;
        -: 1391:	
        -: 1392:  //remove card from player's hand
    #####: 1393:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1394:    {
        -: 1395:      //reduce number of cards in hand
    #####: 1396:      state->handCount[currentPlayer]--;
        -: 1397:    }
    #####: 1398:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1399:    {
        -: 1400:      //reduce number of cards in hand
    #####: 1401:      state->handCount[currentPlayer]--;
        -: 1402:    }
        -: 1403:  else 	
        -: 1404:    {
        -: 1405:      //replace discarded card with last card in hand
    #####: 1406:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1407:      //set last card to -1
    #####: 1408:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1409:      //reduce number of cards in hand
    #####: 1410:      state->handCount[currentPlayer]--;
        -: 1411:    }
        -: 1412:	
    #####: 1413:  return 0;
        -: 1414:}
        -: 1415:
    #####: 1416:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1417:{
        -: 1418:  //Note: supplyPos is enum of choosen card
        -: 1419:	
        -: 1420:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1421:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1422:    {
    #####: 1423:      return -1;
        -: 1424:    }
        -: 1425:	
        -: 1426:  //added card for [whoseTurn] current player:
        -: 1427:  // toFlag = 0 : add to discard
        -: 1428:  // toFlag = 1 : add to deck
        -: 1429:  // toFlag = 2 : add to hand
        -: 1430:
    #####: 1431:  if (toFlag == 1)
        -: 1432:    {
    #####: 1433:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1434:      state->deckCount[player]++;
        -: 1435:    }
    #####: 1436:  else if (toFlag == 2)
        -: 1437:    {
    #####: 1438:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1439:      state->handCount[player]++;
        -: 1440:    }
        -: 1441:  else
        -: 1442:    {
    #####: 1443:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1444:      state->discardCount[player]++;
        -: 1445:    }
        -: 1446:	
        -: 1447:  //decrease number in supply pile
    #####: 1448:  state->supplyCount[supplyPos]--;
        -: 1449:	 
    #####: 1450:  return 0;
        -: 1451:}
        -: 1452:
       49: 1453:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1454:{
        -: 1455:  int i;
        -: 1456:	
        -: 1457:  //reset coin count
       49: 1458:  state->coins = 0;
        -: 1459:
        -: 1460:  //add coins for each Treasure card in player's hand
      294: 1461:  for (i = 0; i < state->handCount[player]; i++)
        -: 1462:    {
      245: 1463:      if (state->hand[player][i] == copper)
        -: 1464:	{
      170: 1465:	  state->coins += 1;
        -: 1466:	}
       75: 1467:      else if (state->hand[player][i] == silver)
        -: 1468:	{
    #####: 1469:	  state->coins += 2;
        -: 1470:	}
       75: 1471:      else if (state->hand[player][i] == gold)
        -: 1472:	{
    #####: 1473:	  state->coins += 3;
        -: 1474:	}	
        -: 1475:    }	
        -: 1476:
        -: 1477:  //add bonus
       49: 1478:  state->coins += bonus;
        -: 1479:
       49: 1480:  return 0;
        -: 1481:}
        -: 1482:
        -: 1483:
        -: 1484://end of dominion.c
        -: 1485:
